{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.0", "generated_at": "2022-11-11T06:08:53.392436Z", "invocation_id": "048a9dc7-2022-48da-bd79-4eda8997eec0", "env": {}, "project_id": "a0a37035a1f0e613931a53c0a9cd57a3", "user_id": "9f55709b-d39f-4a0d-b8df-d52b9b6b2bf2", "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.preppin_data.src_week_202201": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "ingestion", "src_week_202201"], "unique_id": "model.preppin_data.src_week_202201", "raw_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1p8gt3cR3ATCeGK81pnT90x0a6dbCXst1&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)", "language": "python", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "ingestion/src_week_202201.py", "original_file_path": "models/ingestion/src_week_202201.py", "name": "src_week_202201", "alias": "src_week_202201", "checksum": {"name": "sha256", "checksum": "74f8ac4084450d67b478e250d5fe31b5c509f7b084fa99e81a0b02e1a1111021"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Loads source file for [Preppin' Data 2022 Week 1](https://preppindata.blogspot.com/2022/01/2022-week-1-prep-school-parental.html) to database table. This week has only 1 source file. Link to file: [here](https://drive.google.com/file/d/1p8gt3cR3ATCeGK81pnT90x0a6dbCXst1/view)\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/ingestion/schema.yml", "compiled_path": "target/compiled/preppin_data/models/ingestion/src_week_202201.py", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1667971790.1976514, "compiled_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1p8gt3cR3ATCeGK81pnT90x0a6dbCXst1&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'main'\n    schema = 'main'\n    identifier = 'src_week_202201'\n    def __repr__(self):\n        return 'main.main.src_week_202201'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"src_week_202201\""}, "model.preppin_data.src_week_202243": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "ingestion", "src_week_202243"], "unique_id": "model.preppin_data.src_week_202243", "raw_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1lyYO70ooCldGLT8yPHoiiHn_z7S-CN7V&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)", "language": "python", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "ingestion/src_week_202243.py", "original_file_path": "models/ingestion/src_week_202243.py", "name": "src_week_202243", "alias": "src_week_202243", "checksum": {"name": "sha256", "checksum": "a212405f9a23f9ee5f0dbd7201b39dec09ddf6c8d6b50a1339b2a006b31ad2aa"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Loads source file for [Preppin' Data 2022 Week 43](https://preppindata.blogspot.com/2022/10/2022-week-43-missing-training-data-20.html) to database table. This week has only 1 source file. Link to file: [here](https://drive.google.com/file/d/1lyYO70ooCldGLT8yPHoiiHn_z7S-CN7V/view)\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/ingestion/schema.yml", "compiled_path": "target/compiled/preppin_data/models/ingestion/src_week_202243.py", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1667971790.1978707, "compiled_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1lyYO70ooCldGLT8yPHoiiHn_z7S-CN7V&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'main'\n    schema = 'main'\n    identifier = 'src_week_202243'\n    def __repr__(self):\n        return 'main.main.src_week_202243'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"src_week_202243\""}, "model.preppin_data.src_week_202239": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "ingestion", "src_week_202239"], "unique_id": "model.preppin_data.src_week_202239", "raw_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1p5Dn8DR4XDPmfEv4MQL-1C0EJZO4t97P&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)", "language": "python", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "ingestion/src_week_202239.py", "original_file_path": "models/ingestion/src_week_202239.py", "name": "src_week_202239", "alias": "src_week_202239", "checksum": {"name": "sha256", "checksum": "d952fb3cdedb090400c3f2cd5420312fbc343b8be05e69c54634cf1cecbe2371"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Loads source file for [Preppin' Data 2022 Week 39](https://preppindata.blogspot.com/2022/09/2022-week-39-filling-in-for-hr.html) to database table. This week has only 1 source file. Link to file: [here](https://drive.google.com/file/d/1p5Dn8DR4XDPmfEv4MQL-1C0EJZO4t97P/view)\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/ingestion/schema.yml", "compiled_path": "target/compiled/preppin_data/models/ingestion/src_week_202239.py", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1667971790.1980891, "compiled_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1p5Dn8DR4XDPmfEv4MQL-1C0EJZO4t97P&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'main'\n    schema = 'main'\n    identifier = 'src_week_202239'\n    def __repr__(self):\n        return 'main.main.src_week_202239'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"src_week_202239\""}, "model.preppin_data.202239_solution": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.preppin_data.model_to_csv"], "nodes": ["model.preppin_data.src_week_202239"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "{{ model_to_csv() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "solutions", "202239_solution"], "unique_id": "model.preppin_data.202239_solution", "raw_code": "with\n\n    source_data as (\n        select\n            \"\u00ef\u00bb\u00bfRecord ID\" as record_id,\n            case trim(\"Employee\") when '' then null else \"Employee\" end as employee,\n            \"Work Level\" as work_level,\n            \"Stage\" as stage,\n            cast(strptime(\"Date\", '%d/%m/%Y') as date) as date\n        from {{ ref(\"src_week_202239\") }}\n    ),\n\n    fill_grouper as (\n        select\n            record_id,\n            employee,\n            work_level,\n            stage,\n            date,\n            count(employee) over (order by record_id) as fill_group_employee,\n            count(work_level) over (order by record_id) as fill_group_work_level\n        from source_data\n    )\n\nselect\n    record_id,\n    first_value(employee) over (\n        partition by fill_group_employee order by record_id\n    ) as employee,\n    first_value(work_level) over (\n        partition by fill_group_work_level order by record_id\n    ) as work_level,\n    stage,\n    date\nfrom fill_grouper", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "solutions/202239_solution.sql", "original_file_path": "models/solutions/202239_solution.sql", "name": "202239_solution", "alias": "202239_solution", "checksum": {"name": "sha256", "checksum": "ba77ee3413706c0b5e55a80b57a9828d53225b3904ca2d8dd454da8ad5985d01"}, "tags": [], "refs": [["src_week_202239"]], "sources": [], "metrics": [], "description": "Solution SQL definition for [Preppin' Data 2022 Week 39](https://preppindata.blogspot.com/2022/09/2022-week-39-filling-in-for-hr.html). Created as view and exported as [202239_solution_output.csv](https://github.com/jharris126/preppin-data-dbt/blob/master/solution_outputs/202239_solution_output.csv) in [/preppin-data-dbt/solution_outputs](https://github.com/jharris126/preppin-data-dbt/tree/master/solution_outputs) folder. All solutions sql files automatically generate a `.csv` output file when run using the [model_to_csv macro](#!/macro/macro.preppin_data.model_to_csv).\n", "columns": {"record_id": {"name": "record_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "BIGINT"}, "employee": {"name": "employee", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "work_level": {"name": "work_level", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "stage": {"name": "stage", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "DATE"}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/solutions/schema.yml", "compiled_path": "target/compiled/preppin_data/models/solutions/202239_solution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ model_to_csv() }}"]}, "created_at": 1667971790.1770759, "compiled_code": "with\n\n    source_data as (\n        select\n            \"\u00ef\u00bb\u00bfRecord ID\" as record_id,\n            case trim(\"Employee\") when '' then null else \"Employee\" end as employee,\n            \"Work Level\" as work_level,\n            \"Stage\" as stage,\n            cast(strptime(\"Date\", '%d/%m/%Y') as date) as date\n        from \"main\".\"main\".\"src_week_202239\"\n    ),\n\n    fill_grouper as (\n        select\n            record_id,\n            employee,\n            work_level,\n            stage,\n            date,\n            count(employee) over (order by record_id) as fill_group_employee,\n            count(work_level) over (order by record_id) as fill_group_work_level\n        from source_data\n    )\n\nselect\n    record_id,\n    first_value(employee) over (\n        partition by fill_group_employee order by record_id\n    ) as employee,\n    first_value(work_level) over (\n        partition by fill_group_work_level order by record_id\n    ) as work_level,\n    stage,\n    date\nfrom fill_grouper", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"202239_solution\""}, "model.preppin_data.202201_solution": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.preppin_data.model_to_csv"], "nodes": ["model.preppin_data.src_week_202201"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "{{ model_to_csv() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "solutions", "202201_solution"], "unique_id": "model.preppin_data.202201_solution", "raw_code": "with\n\n    source_data as (\n        select\n            \"id\" as id,\n            \"pupil first name\" as pupil_first_name,\n            \"pupil last name\" as pupil_last_name,\n            \"gender\" as gender,\n            cast(strptime(\"Date of Birth\", '%-m/%-d/%Y') as date) as date_of_birth,\n            \"Parental Contact Name_1\" as parental_contact_name_1,\n            \"Parental Contact Name_2\" as parental_contact_name_2,\n            \"Preferred Contact Employer\" as preferred_contact_employer,\n            \"Parental Contact\" as parental_contact\n        from {{ ref(\"src_week_202201\") }}\n    )\n\nselect\n    cast(\n        ceil(date_diff('month', date_of_birth, cast('2014-09-01' as date)) / 12.0)\n        + 1 as int\n    ) as academic_year,\n    concat(pupil_last_name, ', ', pupil_first_name) as pupils_name,\n    case\n        when parental_contact = 1\n        then concat(pupil_last_name, ', ', parental_contact_name_1)\n        else concat(pupil_last_name, ', ', parental_contact_name_2)\n    end as parental_contact_full_name,\n    case\n        when parental_contact = 1\n        then\n            concat(\n                parental_contact_name_1,\n                '.',\n                pupil_last_name,\n                '@',\n                preferred_contact_employer,\n                '.com'\n            )\n        else\n            concat(\n                parental_contact_name_2,\n                '.',\n                pupil_last_name,\n                '@',\n                preferred_contact_employer,\n                '.com'\n            )\n    end as parental_contact_email_address\nfrom source_data", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "solutions/202201_solution.sql", "original_file_path": "models/solutions/202201_solution.sql", "name": "202201_solution", "alias": "202201_solution", "checksum": {"name": "sha256", "checksum": "77d24c844a38643fa201c768083c7c11f2c4a810e249a0568e8b199a996e22b8"}, "tags": [], "refs": [["src_week_202201"]], "sources": [], "metrics": [], "description": "Solution SQL definition for [Preppin' Data 2022 Week 1](https://preppindata.blogspot.com/2022/01/2022-week-1-prep-school-parental.html). Created as view and exported as [202201_solution_output.csv](https://github.com/jharris126/preppin-data-dbt/blob/master/solution_outputs/202201_solution_output.csv) in [/preppin-data-dbt/solution_outputs](https://github.com/jharris126/preppin-data-dbt/tree/master/solution_outputs) folder. All solutions sql files automatically generate a `.csv` output file when run using the [model_to_csv macro](#!/macro/macro.preppin_data.model_to_csv).\n", "columns": {"academic_year": {"name": "academic_year", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "INTEGER"}, "pupils_name": {"name": "pupils_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "parental_contact_full_name": {"name": "parental_contact_full_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "parental_contact_email_address": {"name": "parental_contact_email_address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/solutions/schema.yml", "compiled_path": "target/compiled/preppin_data/models/solutions/202201_solution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ model_to_csv() }}"]}, "created_at": 1667971790.178526, "compiled_code": "with\n\n    source_data as (\n        select\n            \"id\" as id,\n            \"pupil first name\" as pupil_first_name,\n            \"pupil last name\" as pupil_last_name,\n            \"gender\" as gender,\n            cast(strptime(\"Date of Birth\", '%-m/%-d/%Y') as date) as date_of_birth,\n            \"Parental Contact Name_1\" as parental_contact_name_1,\n            \"Parental Contact Name_2\" as parental_contact_name_2,\n            \"Preferred Contact Employer\" as preferred_contact_employer,\n            \"Parental Contact\" as parental_contact\n        from \"main\".\"main\".\"src_week_202201\"\n    )\n\nselect\n    cast(\n        ceil(date_diff('month', date_of_birth, cast('2014-09-01' as date)) / 12.0)\n        + 1 as int\n    ) as academic_year,\n    concat(pupil_last_name, ', ', pupil_first_name) as pupils_name,\n    case\n        when parental_contact = 1\n        then concat(pupil_last_name, ', ', parental_contact_name_1)\n        else concat(pupil_last_name, ', ', parental_contact_name_2)\n    end as parental_contact_full_name,\n    case\n        when parental_contact = 1\n        then\n            concat(\n                parental_contact_name_1,\n                '.',\n                pupil_last_name,\n                '@',\n                preferred_contact_employer,\n                '.com'\n            )\n        else\n            concat(\n                parental_contact_name_2,\n                '.',\n                pupil_last_name,\n                '@',\n                preferred_contact_employer,\n                '.com'\n            )\n    end as parental_contact_email_address\nfrom source_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"202201_solution\""}, "model.preppin_data.202244_solution": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.preppin_data.model_to_csv"], "nodes": ["model.preppin_data.src_week_202244"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "{{ model_to_csv() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "solutions", "202244_solution"], "unique_id": "model.preppin_data.202244_solution", "raw_code": "with\n\n    src_prep as (\n        select\n            string_split(customer, ' ')[1][1] as order_id_prefix_1,\n            string_split(customer, ' ')[-1][1] as order_id_prefix_2,\n            lpad(\"Order Number\", 6, '0') as order_id_suffix,\n            \"Order Number\" as order_number,\n            customer as customer,\n            case\n                when \"Order Date\" = ''\n                then null\n                else cast(strptime(\"Order Date\", '%d/%m/%Y') as date)\n            end order_date_1,\n            case\n                when \"Date of Order\" = ''\n                then null\n                else cast(strptime(\"Date of Order\", '%a %d %b %Y') as date)\n            end order_date_2,\n            case\n                when \"Purchase Date\" = ''\n                then null\n                else cast(strptime(\"Purchase Date\", '%d/%m/%Y') as date)\n            end order_date_3\n        from {{ ref(\"src_week_202244\") }}\n    )\n\nselect\n    concat(order_id_prefix_1, order_id_prefix_2, order_id_suffix) as order_id,\n    order_number,\n    customer,\n    concat(order_date_1, order_date_2, order_date_3) as order_date,\nfrom src_prep", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "solutions/202244_solution.sql", "original_file_path": "models/solutions/202244_solution.sql", "name": "202244_solution", "alias": "202244_solution", "checksum": {"name": "sha256", "checksum": "e5d723a7b37aac569b629b4f6ba7ff92ad98bda57c92336aed80c2788f2fa23b"}, "tags": [], "refs": [["src_week_202244"]], "sources": [], "metrics": [], "description": "Solution SQL definition for [Preppin' Data 2022 Week 44](https://preppindata.blogspot.com/2022/11/2022-week-44-creating-order-ids.html). Created as view and exported as [202244_solution_output.csv](https://github.com/jharris126/preppin-data-dbt/blob/master/solution_outputs/202244_solution_output.csv) in [/preppin-data-dbt/solution_outputs](https://github.com/jharris126/preppin-data-dbt/tree/master/solution_outputs) folder. All solutions sql files automatically generate a `.csv` output file when run using the [model_to_csv macro](#!/macro/macro.preppin_data.model_to_csv).\n", "columns": {"order_id": {"name": "order_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "order_number": {"name": "order_number", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "BIGINT"}, "customer": {"name": "customer", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "order_date": {"name": "order_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "DATE"}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/solutions/schema.yml", "compiled_path": "target/compiled/preppin_data/models/solutions/202244_solution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ model_to_csv() }}"]}, "created_at": 1667971790.1801076, "compiled_code": "with\n\n    src_prep as (\n        select\n            string_split(customer, ' ')[1][1] as order_id_prefix_1,\n            string_split(customer, ' ')[-1][1] as order_id_prefix_2,\n            lpad(\"Order Number\", 6, '0') as order_id_suffix,\n            \"Order Number\" as order_number,\n            customer as customer,\n            case\n                when \"Order Date\" = ''\n                then null\n                else cast(strptime(\"Order Date\", '%d/%m/%Y') as date)\n            end order_date_1,\n            case\n                when \"Date of Order\" = ''\n                then null\n                else cast(strptime(\"Date of Order\", '%a %d %b %Y') as date)\n            end order_date_2,\n            case\n                when \"Purchase Date\" = ''\n                then null\n                else cast(strptime(\"Purchase Date\", '%d/%m/%Y') as date)\n            end order_date_3\n        from \"main\".\"main\".\"src_week_202244\"\n    )\n\nselect\n    concat(order_id_prefix_1, order_id_prefix_2, order_id_suffix) as order_id,\n    order_number,\n    customer,\n    concat(order_date_1, order_date_2, order_date_3) as order_date,\nfrom src_prep", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"202244_solution\""}, "model.preppin_data.src_week_202242": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "ingestion", "src_week_202242"], "unique_id": "model.preppin_data.src_week_202242", "raw_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1d4ItvcaPATxbFevMOfAIXXpchOh-09D_&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)", "language": "python", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "ingestion/src_week_202242.py", "original_file_path": "models/ingestion/src_week_202242.py", "name": "src_week_202242", "alias": "src_week_202242", "checksum": {"name": "sha256", "checksum": "9f7f1947008e3377b6e410c26ff9adf9d2061ab48241534158b42c1088e49b91"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Loads source file for [Preppin' Data 2022 Week 42](https://preppindata.blogspot.com/2022/10/2022-week-42-missing-training-data.html) to database table. This week has only 1 source file. Link to file: [here](https://drive.google.com/file/d/1d4ItvcaPATxbFevMOfAIXXpchOh-09D_/view)\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/ingestion/schema.yml", "compiled_path": "target/compiled/preppin_data/models/ingestion/src_week_202242.py", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1667971790.198479, "compiled_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1d4ItvcaPATxbFevMOfAIXXpchOh-09D_&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'main'\n    schema = 'main'\n    identifier = 'src_week_202242'\n    def __repr__(self):\n        return 'main.main.src_week_202242'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"src_week_202242\""}, "test.preppin_data.unique_202239_solution_record_id.b4ff73b03d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "record_id", "model": "{{ get_where_subquery(ref('202239_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202239_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "unique_202239_solution_record_id"], "unique_id": "test.preppin_data.unique_202239_solution_record_id.b4ff73b03d", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "unique_202239_solution_record_id.sql", "original_file_path": "models/solutions/schema.yml", "name": "unique_202239_solution_record_id", "alias": "unique_202239_solution_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202239_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/unique_202239_solution_record_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.1907485, "compiled_code": "\n    \n    \n\nselect\n    record_id as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"202239_solution\"\nwhere record_id is not null\ngroup by record_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "record_id", "file_key_name": "models.202239_solution"}, "test.preppin_data.not_null_202239_solution_record_id.8190d90f93": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "record_id", "model": "{{ get_where_subquery(ref('202239_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202239_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202239_solution_record_id"], "unique_id": "test.preppin_data.not_null_202239_solution_record_id.8190d90f93", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202239_solution_record_id.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202239_solution_record_id", "alias": "not_null_202239_solution_record_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202239_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202239_solution_record_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.1914988, "compiled_code": "\n    \n    \n\n\n\nselect record_id\nfrom \"main\".\"main\".\"202239_solution\"\nwhere record_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "record_id", "file_key_name": "models.202239_solution"}, "test.preppin_data.not_null_202239_solution_employee.c40da41029": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "employee", "model": "{{ get_where_subquery(ref('202239_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202239_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202239_solution_employee"], "unique_id": "test.preppin_data.not_null_202239_solution_employee.c40da41029", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202239_solution_employee.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202239_solution_employee", "alias": "not_null_202239_solution_employee", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202239_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202239_solution_employee.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.1922367, "compiled_code": "\n    \n    \n\n\n\nselect employee\nfrom \"main\".\"main\".\"202239_solution\"\nwhere employee is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "employee", "file_key_name": "models.202239_solution"}, "test.preppin_data.not_null_202239_solution_work_level.528a16a649": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "work_level", "model": "{{ get_where_subquery(ref('202239_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202239_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202239_solution_work_level"], "unique_id": "test.preppin_data.not_null_202239_solution_work_level.528a16a649", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202239_solution_work_level.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202239_solution_work_level", "alias": "not_null_202239_solution_work_level", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202239_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202239_solution_work_level.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.1930435, "compiled_code": "\n    \n    \n\n\n\nselect work_level\nfrom \"main\".\"main\".\"202239_solution\"\nwhere work_level is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "work_level", "file_key_name": "models.202239_solution"}, "test.preppin_data.not_null_202244_solution_order_id.e0ba672ac1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('202244_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202244_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202244_solution_order_id"], "unique_id": "test.preppin_data.not_null_202244_solution_order_id.e0ba672ac1", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202244_solution_order_id.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202244_solution_order_id", "alias": "not_null_202244_solution_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202244_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202244_solution_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.193927, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"main\".\"main\".\"202244_solution\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.202244_solution"}, "test.preppin_data.unique_202244_solution_order_id.40381b5035": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('202244_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202244_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "unique_202244_solution_order_id"], "unique_id": "test.preppin_data.unique_202244_solution_order_id.40381b5035", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "unique_202244_solution_order_id.sql", "original_file_path": "models/solutions/schema.yml", "name": "unique_202244_solution_order_id", "alias": "unique_202244_solution_order_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202244_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/unique_202244_solution_order_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.1946697, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"202244_solution\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_id", "file_key_name": "models.202244_solution"}, "test.preppin_data.not_null_202244_solution_order_number.6feabe4edf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_number", "model": "{{ get_where_subquery(ref('202244_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202244_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202244_solution_order_number"], "unique_id": "test.preppin_data.not_null_202244_solution_order_number.6feabe4edf", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202244_solution_order_number.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202244_solution_order_number", "alias": "not_null_202244_solution_order_number", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202244_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202244_solution_order_number.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.19539, "compiled_code": "\n    \n    \n\n\n\nselect order_number\nfrom \"main\".\"main\".\"202244_solution\"\nwhere order_number is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_number", "file_key_name": "models.202244_solution"}, "test.preppin_data.not_null_202244_solution_customer.149114f4d4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "customer", "model": "{{ get_where_subquery(ref('202244_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202244_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202244_solution_customer"], "unique_id": "test.preppin_data.not_null_202244_solution_customer.149114f4d4", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202244_solution_customer.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202244_solution_customer", "alias": "not_null_202244_solution_customer", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202244_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202244_solution_customer.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.1961112, "compiled_code": "\n    \n    \n\n\n\nselect customer\nfrom \"main\".\"main\".\"202244_solution\"\nwhere customer is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "customer", "file_key_name": "models.202244_solution"}, "test.preppin_data.not_null_202244_solution_order_date.da4c2a2f92": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_date", "model": "{{ get_where_subquery(ref('202244_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202244_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202244_solution_order_date"], "unique_id": "test.preppin_data.not_null_202244_solution_order_date.da4c2a2f92", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202244_solution_order_date.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202244_solution_order_date", "alias": "not_null_202244_solution_order_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202244_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202244_solution_order_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1667971790.1969383, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom \"main\".\"main\".\"202244_solution\"\nwhere order_date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "order_date", "file_key_name": "models.202244_solution"}, "model.preppin_data.src_week_202244": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "ingestion", "src_week_202244"], "unique_id": "model.preppin_data.src_week_202244", "raw_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1b9KuMlut8mO2LR-zpMe6Ek0XDS8Wcj6D&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)", "language": "python", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "ingestion/src_week_202244.py", "original_file_path": "models/ingestion/src_week_202244.py", "name": "src_week_202244", "alias": "src_week_202244", "checksum": {"name": "sha256", "checksum": "ee071a4ebb36468ecb99fd4af4d2cebc64f991da889f0e4da8b0e71f694725cb"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Loads source file for [Preppin' Data 2022 Week 44](https://preppindata.blogspot.com/2022/11/2022-week-44-creating-order-ids.html) to database table. This week has only 1 source file. Link to file: [here](https://drive.google.com/file/d/1b9KuMlut8mO2LR-zpMe6Ek0XDS8Wcj6D/view)\n", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/ingestion/schema.yml", "compiled_path": "target/compiled/preppin_data/models/ingestion/src_week_202244.py", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1668144419.3915453, "compiled_code": "def model(dbt, session):\n    import requests\n    from io import BytesIO\n    from pyarrow.csv import read_csv\n\n    source_data_url = \"https://drive.google.com/u/0/uc?id=1b9KuMlut8mO2LR-zpMe6Ek0XDS8Wcj6D&export=download\"\n    csv_text = requests.get(source_data_url).text\n    csv_bytes = str.encode(csv_text)\n    csv_data = BytesIO(csv_bytes)\n\n    return read_csv(csv_data)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'main'\n    schema = 'main'\n    identifier = 'src_week_202244'\n    def __repr__(self):\n        return 'main.main.src_week_202244'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"src_week_202244\""}, "model.preppin_data.src_week_202245": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.py_script_postfix"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "ingestion", "src_week_202245"], "unique_id": "model.preppin_data.src_week_202245", "raw_code": "def model(dbt, session):\n    import pandas as pd\n    import itertools\n\n    source_data_url = \"https://docs.google.com/spreadsheets/d/1yl90nKrQzpAgm3oYgrS44d3iX73VphSz/export?format=csv\"\n    data = pd.read_csv(source_data_url, skiprows=2, header=[0, 1]).values\n    cols_maker = itertools.product(\n        [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\"],\n        [\"sales\", \"profit\"],\n    )\n    cols = [\"_\".join(col) for col in list(cols_maker)]\n    cols.insert(0, \"store\")\n\n    return pd.DataFrame(data, columns=cols)", "language": "python", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "ingestion/src_week_202245.py", "original_file_path": "models/ingestion/src_week_202245.py", "name": "src_week_202245", "alias": "src_week_202245", "checksum": {"name": "sha256", "checksum": "3fe639dc4aca4ef77158e909b227ac5d729a9d51f4af2473422712f89a77e58f"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Loads source file for [Preppin' Data 2022 Week 45](https://preppindata.blogspot.com/2022/11/2022-week-45-strange-table-structure.html) to database table. This week has only 1 source file. Link to file: [here](https://docs.google.com/spreadsheets/d/1yl90nKrQzpAgm3oYgrS44d3iX73VphSz)", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/ingestion/schema.yml", "compiled_path": "target/compiled/preppin_data/models/ingestion/src_week_202245.py", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1668144419.3919187, "compiled_code": "def model(dbt, session):\n    import pandas as pd\n    import itertools\n\n    source_data_url = \"https://docs.google.com/spreadsheets/d/1yl90nKrQzpAgm3oYgrS44d3iX73VphSz/export?format=csv\"\n    data = pd.read_csv(source_data_url, skiprows=2, header=[0, 1]).values\n    cols_maker = itertools.product(\n        [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\"],\n        [\"sales\", \"profit\"],\n    )\n    cols = [\"_\".join(col) for col in list(cols_maker)]\n    cols.insert(0, \"store\")\n\n    return pd.DataFrame(data, columns=cols)\n\n\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\ndef ref(*args,dbt_load_df_function):\n    refs = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n\ndef source(*args, dbt_load_df_function):\n    sources = {}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n\nconfig_dict = {}\n\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = 'main'\n    schema = 'main'\n    identifier = 'src_week_202245'\n    def __repr__(self):\n        return 'main.main.src_week_202245'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = False\n\n# COMMAND ----------\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"src_week_202245\""}, "model.preppin_data.202242_solution": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.preppin_data.model_to_csv"], "nodes": ["model.preppin_data.src_week_202242", "model.preppin_data.dates"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "{{ model_to_csv() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "solutions", "202242_solution"], "unique_id": "model.preppin_data.202242_solution", "raw_code": "with\n\n    source_data as (\n        select\n            \"Player\" as player, \"Session\" as session, \"Date\" as date, \"Score\" as score\n        from {{ ref(\"src_week_202242\") }}\n    ),\n\n    session_dates as (\n        select date_value\n        from {{ ref(\"dates\") }}\n        where\n            dates.date_value between (select min(date) from source_data) and (\n                select max(date) from source_data\n            )\n            and day_name not in ('Saturday', 'Sunday')\n    ),\n\n    players as (select distinct player from source_data),\n\n    sessions as (select distinct session from source_data),\n\n    player_sessions as (\n        select\n            players.player, sessions.session, session_dates.date_value as session_date\n        from players\n        cross join sessions\n        cross join session_dates\n    ),\n\n    combined as (\n        select\n            player_sessions.player,\n            player_sessions.session,\n            player_sessions.session_date,\n            source_data.score\n        from player_sessions\n        left join\n            source_data\n            on player_sessions.player = source_data.player\n            and player_sessions.session = source_data.session\n            and player_sessions.session_date = source_data.date\n    ),\n\n    fill_grouper as (\n        select\n            player,\n            session,\n            session_date,\n            score,\n            count(score) over (\n                partition by player, session order by session_date\n            ) as fill_group\n        from combined\n    )\n\nselect\n    player,\n    session,\n    session_date,\n    first_value(score) over (\n        partition by player, session, fill_group order by session_date\n    ) as score,\n    case when score is null then 'Carried Over' else 'Actual' end as flag\nfrom fill_grouper", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "solutions/202242_solution.sql", "original_file_path": "models/solutions/202242_solution.sql", "name": "202242_solution", "alias": "202242_solution", "checksum": {"name": "sha256", "checksum": "56150177610ae5506b6bb4e8cddb522c9e230e32770cf956a96c7f7caaf723eb"}, "tags": [], "refs": [["src_week_202242"], ["dates"]], "sources": [], "metrics": [], "description": "Solution SQL definition for [Preppin' Data 2022 Week 42](https://preppindata.blogspot.com/2022/10/2022-week-42-missing-training-data.html). Created as view and exported as [202242_solution_output.csv](https://github.com/jharris126/preppin-data-dbt/blob/master/solution_outputs/202242_solution_output.csv) in [/preppin-data-dbt/solution_outputs](https://github.com/jharris126/preppin-data-dbt/tree/master/solution_outputs) folder. All solutions sql files automatically generate a `.csv` output file when run using the [model_to_csv macro](#!/macro/macro.preppin_data.model_to_csv).\n", "columns": {"player": {"name": "player", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "session": {"name": "session", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "session_date": {"name": "session_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "DATE"}, "score": {"name": "score", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "BIGINT"}, "flag": {"name": "flag", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/solutions/schema.yml", "compiled_path": "target/compiled/preppin_data/models/solutions/202242_solution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ model_to_csv() }}"]}, "created_at": 1668145671.3993971, "compiled_code": "with\n\n    source_data as (\n        select\n            \"Player\" as player, \"Session\" as session, \"Date\" as date, \"Score\" as score\n        from \"main\".\"main\".\"src_week_202242\"\n    ),\n\n    session_dates as (\n        select date_value\n        from \"main\".\"main\".\"dates\"\n        where\n            dates.date_value between (select min(date) from source_data) and (\n                select max(date) from source_data\n            )\n            and day_name not in ('Saturday', 'Sunday')\n    ),\n\n    players as (select distinct player from source_data),\n\n    sessions as (select distinct session from source_data),\n\n    player_sessions as (\n        select\n            players.player, sessions.session, session_dates.date_value as session_date\n        from players\n        cross join sessions\n        cross join session_dates\n    ),\n\n    combined as (\n        select\n            player_sessions.player,\n            player_sessions.session,\n            player_sessions.session_date,\n            source_data.score\n        from player_sessions\n        left join\n            source_data\n            on player_sessions.player = source_data.player\n            and player_sessions.session = source_data.session\n            and player_sessions.session_date = source_data.date\n    ),\n\n    fill_grouper as (\n        select\n            player,\n            session,\n            session_date,\n            score,\n            count(score) over (\n                partition by player, session order by session_date\n            ) as fill_group\n        from combined\n    )\n\nselect\n    player,\n    session,\n    session_date,\n    first_value(score) over (\n        partition by player, session, fill_group order by session_date\n    ) as score,\n    case when score is null then 'Carried Over' else 'Actual' end as flag\nfrom fill_grouper", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"202242_solution\""}, "model.preppin_data.202243_solution": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.preppin_data.model_to_csv"], "nodes": ["model.preppin_data.src_week_202243", "model.preppin_data.dates"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "{{ model_to_csv() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "solutions", "202243_solution"], "unique_id": "model.preppin_data.202243_solution", "raw_code": "with\n\n    source_data as (\n        select\n            \"Player\" as player, \"Session\" as session, \"Date\" as date, \"Score\" as score\n        from {{ ref(\"src_week_202243\") }}\n    ),\n\n    session_dates as (\n        select date_value\n        from {{ ref(\"dates\") }}\n        where\n            dates.date_value between (select min(date) from source_data) and (\n                select max(date) from source_data\n            )\n            and day_name not in ('Saturday', 'Sunday')\n    ),\n\n    players as (select distinct player from source_data),\n\n    sessions as (select distinct session from source_data),\n\n    player_sessions as (\n        select\n            players.player, sessions.session, session_dates.date_value as session_date\n        from players\n        cross join sessions\n        cross join session_dates\n    ),\n\n    combined as (\n        select\n            player_sessions.player,\n            player_sessions.session,\n            player_sessions.session_date,\n            source_data.score\n        from player_sessions\n        left join\n            source_data\n            on player_sessions.player = source_data.player\n            and player_sessions.session = source_data.session\n            and player_sessions.session_date = source_data.date\n    ),\n\n    fill_grouper as (\n        select\n            player,\n            session,\n            session_date,\n            score,\n            count(score) over (\n                partition by player, session order by session_date\n            ) as fill_group\n        from combined\n    )\n\nselect\n    player,\n    session,\n    session_date,\n    coalesce(\n        first_value(score) over (\n            partition by player, session, fill_group order by session_date\n        ),\n        0\n    ) as score,\n    case\n        when score is not null\n        then 'Actual'\n        when\n            first_value(score) over (\n                partition by player, session, fill_group order by session_date\n            )\n            is not null\n        then 'Carried Over'\n        else 'Pre First Session'\n    end as flag\nfrom fill_grouper", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "solutions/202243_solution.sql", "original_file_path": "models/solutions/202243_solution.sql", "name": "202243_solution", "alias": "202243_solution", "checksum": {"name": "sha256", "checksum": "d0af84f5a274525cd8f101c42cf1686c4d791a1bcdd9e952a65176cbd21b7c8c"}, "tags": [], "refs": [["src_week_202243"], ["dates"]], "sources": [], "metrics": [], "description": "Solution SQL definition for [Preppin' Data 2022 Week 43](https://preppindata.blogspot.com/2022/10/2022-week-43-missing-training-data-20.html). Created as view and exported as [202243_solution_output.csv](https://github.com/jharris126/preppin-data-dbt/blob/master/solution_outputs/202243_solution_output.csv) in [/preppin-data-dbt/solution_outputs](https://github.com/jharris126/preppin-data-dbt/tree/master/solution_outputs) folder. All solutions sql files automatically generate a `.csv` output file when run using the [model_to_csv macro](#!/macro/macro.preppin_data.model_to_csv).\n", "columns": {"player": {"name": "player", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "session": {"name": "session", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "session_date": {"name": "session_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "DATE"}, "score": {"name": "score", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "BIGINT"}, "flag": {"name": "flag", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/solutions/schema.yml", "compiled_path": "target/compiled/preppin_data/models/solutions/202243_solution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ model_to_csv() }}"]}, "created_at": 1668145671.401147, "compiled_code": "with\n\n    source_data as (\n        select\n            \"Player\" as player, \"Session\" as session, \"Date\" as date, \"Score\" as score\n        from \"main\".\"main\".\"src_week_202243\"\n    ),\n\n    session_dates as (\n        select date_value\n        from \"main\".\"main\".\"dates\"\n        where\n            dates.date_value between (select min(date) from source_data) and (\n                select max(date) from source_data\n            )\n            and day_name not in ('Saturday', 'Sunday')\n    ),\n\n    players as (select distinct player from source_data),\n\n    sessions as (select distinct session from source_data),\n\n    player_sessions as (\n        select\n            players.player, sessions.session, session_dates.date_value as session_date\n        from players\n        cross join sessions\n        cross join session_dates\n    ),\n\n    combined as (\n        select\n            player_sessions.player,\n            player_sessions.session,\n            player_sessions.session_date,\n            source_data.score\n        from player_sessions\n        left join\n            source_data\n            on player_sessions.player = source_data.player\n            and player_sessions.session = source_data.session\n            and player_sessions.session_date = source_data.date\n    ),\n\n    fill_grouper as (\n        select\n            player,\n            session,\n            session_date,\n            score,\n            count(score) over (\n                partition by player, session order by session_date\n            ) as fill_group\n        from combined\n    )\n\nselect\n    player,\n    session,\n    session_date,\n    coalesce(\n        first_value(score) over (\n            partition by player, session, fill_group order by session_date\n        ),\n        0\n    ) as score,\n    case\n        when score is not null\n        then 'Actual'\n        when\n            first_value(score) over (\n                partition by player, session, fill_group order by session_date\n            )\n            is not null\n        then 'Carried Over'\n        else 'Pre First Session'\n    end as flag\nfrom fill_grouper", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"202243_solution\""}, "model.preppin_data.dates": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.date_spine"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "common", "dates"], "unique_id": "model.preppin_data.dates", "raw_code": "with\n\n    date_data as (\n        {{\n            dbt_utils.date_spine(\n                datepart=\"day\",\n                start_date=\"cast('1950-01-01' as date)\",\n                end_date=\"cast('2049-12-31' as date)\",\n            )\n        }}\n    )\n\nselect\n    cast(strftime(date_day, '%Y%m%d') as int) as date_integer,\n    date_day as date_value,\n    dayname(date_day) as day_name,\n    date_trunc('month', date_day) as month_start,\n    date_trunc('year', date_day) as year_start\nfrom date_data", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "common/dates.sql", "original_file_path": "models/common/dates.sql", "name": "dates", "alias": "dates", "checksum": {"name": "sha256", "checksum": "b0e49ec1ed1be5a49898253debc1eba2dfca1f9843710b6117948375dc5099ae"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "Date dimension for this dbt project.\n", "columns": {"date_integer": {"name": "date_integer", "description": "Date record as an integer in format: `YYYYMMDD`.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "INTEGER"}, "date_value": {"name": "date_value", "description": "Value of the date record as data type: `DATE`.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "DATE"}, "day_name": {"name": "day_name", "description": "The English name of the day of the week for the date.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "month_start": {"name": "month_start", "description": "Start date of the month the date record belongs to as data type: `DATE`.\n", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "DATE"}, "year_start": {"name": "year_start", "description": "Start date of the year the date record belongs to as data type: `DATE`.", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "DATE"}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/common/schema.yml", "compiled_path": "target/compiled/preppin_data/models/common/dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1668145671.39231, "compiled_code": "with\n\n    date_data as (\n        \n\nwith\n    rawdata as (\n\n        \n\n\n\nwith\n    p as (\n        select 0 as generated_number\n        union all\n        select 1\n    ),\n    unioned as (\n\n        select\n\n            \n            p0.generated_number * power(2, 0)\n             + \n            \n            p1.generated_number * power(2, 1)\n             + \n            \n            p2.generated_number * power(2, 2)\n             + \n            \n            p3.generated_number * power(2, 3)\n             + \n            \n            p4.generated_number * power(2, 4)\n             + \n            \n            p5.generated_number * power(2, 5)\n             + \n            \n            p6.generated_number * power(2, 6)\n             + \n            \n            p7.generated_number * power(2, 7)\n             + \n            \n            p8.generated_number * power(2, 8)\n             + \n            \n            p9.generated_number * power(2, 9)\n             + \n            \n            p10.generated_number * power(2, 10)\n             + \n            \n            p11.generated_number * power(2, 11)\n             + \n            \n            p12.generated_number * power(2, 12)\n             + \n            \n            p13.generated_number * power(2, 13)\n             + \n            \n            p14.generated_number * power(2, 14)\n             + \n            \n            p15.generated_number * power(2, 15)\n            \n            \n            + 1 as generated_number\n\n        from\n\n        \n            p as p0  cross join \n        \n            p as p1  cross join \n        \n            p as p2  cross join \n        \n            p as p3  cross join \n        \n            p as p4  cross join \n        \n            p as p5  cross join \n        \n            p as p6  cross join \n        \n            p as p7  cross join \n        \n            p as p8  cross join \n        \n            p as p9  cross join \n        \n            p as p10  cross join \n        \n            p as p11  cross join \n        \n            p as p12  cross join \n        \n            p as p13  cross join \n        \n            p as p14  cross join \n        \n            p as p15 \n        \n\n    )\n\nselect *\nfrom unioned\nwhere generated_number <= 36524\norder by generated_number\n\n\n\n    ),\n\n    all_periods as (\n\n        select\n            (\n                \n\n    cast('1950-01-01' as date) + ((interval '1 day') * (row_number() over (order by 1) - 1))\n\n\n            ) as date_day\n        from rawdata\n\n    ),\n\n    filtered as (select * from all_periods where date_day <= cast('2049-12-31' as date))\n\nselect *\nfrom filtered\n\n\n    )\n\nselect\n    cast(strftime(date_day, '%Y%m%d') as int) as date_integer,\n    date_day as date_value,\n    dayname(date_day) as day_name,\n    date_trunc('month', date_day) as month_start,\n    date_trunc('year', date_day) as year_start\nfrom date_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"dates\""}, "test.preppin_data.unique_dates_date_value.134261fae6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "date_value", "model": "{{ get_where_subquery(ref('dates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.dates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "common", "unique_dates_date_value"], "unique_id": "test.preppin_data.unique_dates_date_value.134261fae6", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "unique_dates_date_value.sql", "original_file_path": "models/common/schema.yml", "name": "unique_dates_date_value", "alias": "unique_dates_date_value", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/common/schema.yml/unique_dates_date_value.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668145671.3962371, "compiled_code": "\n    \n    \n\nselect\n    date_value as unique_field,\n    count(*) as n_records\n\nfrom \"main\".\"main\".\"dates\"\nwhere date_value is not null\ngroup by date_value\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_value", "file_key_name": "models.dates"}, "test.preppin_data.not_null_dates_date_value.e976e8f11b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date_value", "model": "{{ get_where_subquery(ref('dates')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.dates"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "common", "not_null_dates_date_value"], "unique_id": "test.preppin_data.not_null_dates_date_value.e976e8f11b", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_dates_date_value.sql", "original_file_path": "models/common/schema.yml", "name": "not_null_dates_date_value", "alias": "not_null_dates_date_value", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["dates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/common/schema.yml/not_null_dates_date_value.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668145671.397189, "compiled_code": "\n    \n    \n\n\n\nselect date_value\nfrom \"main\".\"main\".\"dates\"\nwhere date_value is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date_value", "file_key_name": "models.dates"}, "test.preppin_data.not_null_202242_solution_score.7f41d14267": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "score", "model": "{{ get_where_subquery(ref('202242_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202242_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202242_solution_score"], "unique_id": "test.preppin_data.not_null_202242_solution_score.7f41d14267", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202242_solution_score.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202242_solution_score", "alias": "not_null_202242_solution_score", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202242_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202242_solution_score.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668145671.401539, "compiled_code": "\n    \n    \n\n\n\nselect score\nfrom \"main\".\"main\".\"202242_solution\"\nwhere score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "score", "file_key_name": "models.202242_solution"}, "test.preppin_data.accepted_values_202242_solution_flag__Actual__Carried_Over.38869f6d72": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Actual", "Carried Over"], "column_name": "flag", "model": "{{ get_where_subquery(ref('202242_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202242_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "accepted_values_202242_solution_flag__Actual__Carried_Over"], "unique_id": "test.preppin_data.accepted_values_202242_solution_flag__Actual__Carried_Over.38869f6d72", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "accepted_values_202242_solution_flag__Actual__Carried_Over.sql", "original_file_path": "models/solutions/schema.yml", "name": "accepted_values_202242_solution_flag__Actual__Carried_Over", "alias": "accepted_values_202242_solution_flag__Actual__Carried_Over", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202242_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/accepted_values_202242_solution_flag__Actual__Carried_Over.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668145671.4023306, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag as value_field,\n        count(*) as n_records\n\n    from \"main\".\"main\".\"202242_solution\"\n    group by flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Actual','Carried Over'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag", "file_key_name": "models.202242_solution"}, "test.preppin_data.not_null_202243_solution_score.9e2d7f6985": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "score", "model": "{{ get_where_subquery(ref('202243_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202243_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202243_solution_score"], "unique_id": "test.preppin_data.not_null_202243_solution_score.9e2d7f6985", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202243_solution_score.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202243_solution_score", "alias": "not_null_202243_solution_score", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202243_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202243_solution_score.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668145671.408382, "compiled_code": "\n    \n    \n\n\n\nselect score\nfrom \"main\".\"main\".\"202243_solution\"\nwhere score is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "score", "file_key_name": "models.202243_solution"}, "test.preppin_data.accepted_values_202243_solution_flag__Actual__Carried_Over__Pre_First_Session.ebbc4cb330": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Actual", "Carried Over", "Pre First Session"], "column_name": "flag", "model": "{{ get_where_subquery(ref('202243_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202243_solution"]}, "config": {"enabled": true, "alias": "accepted_values_202243_solutio_819e281fbd83505192eb1b1fb990c6b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "accepted_values_202243_solution_flag__Actual__Carried_Over__Pre_First_Session"], "unique_id": "test.preppin_data.accepted_values_202243_solution_flag__Actual__Carried_Over__Pre_First_Session.ebbc4cb330", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_202243_solutio_819e281fbd83505192eb1b1fb990c6b4\") }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "accepted_values_202243_solutio_819e281fbd83505192eb1b1fb990c6b4.sql", "original_file_path": "models/solutions/schema.yml", "name": "accepted_values_202243_solution_flag__Actual__Carried_Over__Pre_First_Session", "alias": "accepted_values_202243_solutio_819e281fbd83505192eb1b1fb990c6b4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202243_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/accepted_values_202243_solutio_819e281fbd83505192eb1b1fb990c6b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_202243_solutio_819e281fbd83505192eb1b1fb990c6b4"}, "created_at": 1668145671.409677, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        flag as value_field,\n        count(*) as n_records\n\n    from \"main\".\"main\".\"202243_solution\"\n    group by flag\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Actual','Carried Over','Pre First Session'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "flag", "file_key_name": "models.202243_solution"}, "model.preppin_data.202245_solution": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.unpivot", "macro.preppin_data.model_to_csv"], "nodes": ["model.preppin_data.src_week_202245"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [{"sql": "{{ model_to_csv() }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "main", "schema": "main", "fqn": ["preppin_data", "solutions", "202245_solution"], "unique_id": "model.preppin_data.202245_solution", "raw_code": "with\n\n    upv as (\n\n        {{\n            dbt_utils.unpivot(\n                ref(\"src_week_202245\"), cast_to=\"varchar\", exclude=[\"store\"]\n            )\n        }}\n\n    ),\n\n    prep as (\n        select\n            store,\n            cast(\n                strptime(\n                    concat(string_split(field_name, '_')[1], '/01/2022'), '%b/%d/%Y'\n                ) as date\n            ) as date,\n            string_split(field_name, '_')[2] as category,\n            value\n        from upv\n    )\n\nselect\n    store,\n    date,\n    cast(max(case when category = 'sales' then value end) as bigint) as sales,\n    cast(max(case when category = 'profit' then value end) as bigint) as profit\nfrom prep\ngroup by store, date", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "solutions/202245_solution.sql", "original_file_path": "models/solutions/202245_solution.sql", "name": "202245_solution", "alias": "202245_solution", "checksum": {"name": "sha256", "checksum": "d0068d57a9ee33697a06979bd5675cca0263e0a62d99fafeef69439e315b6c79"}, "tags": [], "refs": [["src_week_202245"]], "sources": [], "metrics": [], "description": "Solution SQL definition for [Preppin' Data 2022 Week 45](https://preppindata.blogspot.com/2022/11/2022-week-45-strange-table-structure.html). Created as view and exported as [202245_solution_output.csv](https://github.com/jharris126/preppin-data-dbt/blob/master/solution_outputs/202245_solution_output.csv) in [/preppin-data-dbt/solution_outputs](https://github.com/jharris126/preppin-data-dbt/tree/master/solution_outputs) folder. All solutions sql files automatically generate a `.csv` output file when run using the [model_to_csv macro](#!/macro/macro.preppin_data.model_to_csv).\n", "columns": {"store": {"name": "store", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "VARCHAR"}, "date": {"name": "date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "DATE"}, "sales": {"name": "sales", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "BIGINT"}, "profit": {"name": "profit", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": [], "type": "BIGINT"}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://models/solutions/schema.yml", "compiled_path": "target/compiled/preppin_data/models/solutions/202245_solution.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["{{ model_to_csv() }}"]}, "created_at": 1668146903.2138863, "compiled_code": "with\n\n    upv as (\n\n        \n\nselect store,\n\n    cast('jan_sales' as TEXT) as field_name,\n    cast(\n        jan_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('jan_profit' as TEXT) as field_name,\n    cast(\n        jan_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('feb_sales' as TEXT) as field_name,\n    cast(\n        feb_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('feb_profit' as TEXT) as field_name,\n    cast(\n        feb_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('mar_sales' as TEXT) as field_name,\n    cast(\n        mar_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('mar_profit' as TEXT) as field_name,\n    cast(\n        mar_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('apr_sales' as TEXT) as field_name,\n    cast(\n        apr_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('apr_profit' as TEXT) as field_name,\n    cast(\n        apr_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('may_sales' as TEXT) as field_name,\n    cast(\n        may_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('may_profit' as TEXT) as field_name,\n    cast(\n        may_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('jun_sales' as TEXT) as field_name,\n    cast(\n        jun_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('jun_profit' as TEXT) as field_name,\n    cast(\n        jun_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('jul_sales' as TEXT) as field_name,\n    cast(\n        jul_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('jul_profit' as TEXT) as field_name,\n    cast(\n        jul_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('aug_sales' as TEXT) as field_name,\n    cast(\n        aug_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('aug_profit' as TEXT) as field_name,\n    cast(\n        aug_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('sep_sales' as TEXT) as field_name,\n    cast(\n        sep_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('sep_profit' as TEXT) as field_name,\n    cast(\n        sep_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('oct_sales' as TEXT) as field_name,\n    cast(\n        oct_sales\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\nunion all\nselect store,\n\n    cast('oct_profit' as TEXT) as field_name,\n    cast(\n        oct_profit\n         as varchar\n    ) as value\n\nfrom \"main\".\"main\".\"src_week_202245\"\n\n\n\n    ),\n\n    prep as (\n        select\n            store,\n            cast(\n                strptime(\n                    concat(string_split(field_name, '_')[1], '/01/2022'), '%b/%d/%Y'\n                ) as date\n            ) as date,\n            string_split(field_name, '_')[2] as category,\n            value\n        from upv\n    )\n\nselect\n    store,\n    date,\n    cast(max(case when category = 'sales' then value end) as bigint) as sales,\n    cast(max(case when category = 'profit' then value end) as bigint) as profit\nfrom prep\ngroup by store, date", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"main\".\"main\".\"202245_solution\""}, "test.preppin_data.not_null_202245_solution_store.ab5b9c2e95": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "store", "model": "{{ get_where_subquery(ref('202245_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202245_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202245_solution_store"], "unique_id": "test.preppin_data.not_null_202245_solution_store.ab5b9c2e95", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202245_solution_store.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202245_solution_store", "alias": "not_null_202245_solution_store", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202245_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202245_solution_store.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668146903.217952, "compiled_code": "\n    \n    \n\n\n\nselect store\nfrom \"main\".\"main\".\"202245_solution\"\nwhere store is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "store", "file_key_name": "models.202245_solution"}, "test.preppin_data.accepted_values_202245_solution_store__Dulwich__Wimbledon__Notting_Hill__Lewisham.6bf0e9a01a": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Dulwich", "Wimbledon", "Notting Hill", "Lewisham"], "column_name": "store", "model": "{{ get_where_subquery(ref('202245_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202245_solution"]}, "config": {"enabled": true, "alias": "accepted_values_202245_solutio_1c17cd5eebfeab5914ff2a73699fb405", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "accepted_values_202245_solution_store__Dulwich__Wimbledon__Notting_Hill__Lewisham"], "unique_id": "test.preppin_data.accepted_values_202245_solution_store__Dulwich__Wimbledon__Notting_Hill__Lewisham.6bf0e9a01a", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_202245_solutio_1c17cd5eebfeab5914ff2a73699fb405\") }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "accepted_values_202245_solutio_1c17cd5eebfeab5914ff2a73699fb405.sql", "original_file_path": "models/solutions/schema.yml", "name": "accepted_values_202245_solution_store__Dulwich__Wimbledon__Notting_Hill__Lewisham", "alias": "accepted_values_202245_solutio_1c17cd5eebfeab5914ff2a73699fb405", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202245_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/accepted_values_202245_solutio_1c17cd5eebfeab5914ff2a73699fb405.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_202245_solutio_1c17cd5eebfeab5914ff2a73699fb405"}, "created_at": 1668146903.218868, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        store as value_field,\n        count(*) as n_records\n\n    from \"main\".\"main\".\"202245_solution\"\n    group by store\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Dulwich','Wimbledon','Notting Hill','Lewisham'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "store", "file_key_name": "models.202245_solution"}, "test.preppin_data.not_null_202245_solution_date.f52c17dc46": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "date", "model": "{{ get_where_subquery(ref('202245_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202245_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202245_solution_date"], "unique_id": "test.preppin_data.not_null_202245_solution_date.f52c17dc46", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202245_solution_date.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202245_solution_date", "alias": "not_null_202245_solution_date", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202245_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202245_solution_date.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668146903.2254984, "compiled_code": "\n    \n    \n\n\n\nselect date\nfrom \"main\".\"main\".\"202245_solution\"\nwhere date is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "date", "file_key_name": "models.202245_solution"}, "test.preppin_data.not_null_202245_solution_sales.1abca2c1d3": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "sales", "model": "{{ get_where_subquery(ref('202245_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202245_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202245_solution_sales"], "unique_id": "test.preppin_data.not_null_202245_solution_sales.1abca2c1d3", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202245_solution_sales.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202245_solution_sales", "alias": "not_null_202245_solution_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202245_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202245_solution_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668146903.2263038, "compiled_code": "\n    \n    \n\n\n\nselect sales\nfrom \"main\".\"main\".\"202245_solution\"\nwhere sales is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sales", "file_key_name": "models.202245_solution"}, "test.preppin_data.dbt_utils_expression_is_true_202245_solution_sales___0.065580e053": {"test_metadata": {"name": "expression_is_true", "kwargs": {"expression": "> 0", "column_name": "sales", "model": "{{ get_where_subquery(ref('202245_solution')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_expression_is_true", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202245_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "dbt_utils_expression_is_true_202245_solution_sales___0"], "unique_id": "test.preppin_data.dbt_utils_expression_is_true_202245_solution_sales___0.065580e053", "raw_code": "{{ dbt_utils.test_expression_is_true(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "dbt_utils_expression_is_true_202245_solution_sales___0.sql", "original_file_path": "models/solutions/schema.yml", "name": "dbt_utils_expression_is_true_202245_solution_sales___0", "alias": "dbt_utils_expression_is_true_202245_solution_sales___0", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202245_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/dbt_utils_expression_is_true_202245_solution_sales___0.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668146903.2271097, "compiled_code": "\n\nwith meet_condition as (select * from \"main\".\"main\".\"202245_solution\" where 1=1)\n\nselect *\nfrom meet_condition\n where not (sales > 0)\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "sales", "file_key_name": "models.202245_solution"}, "test.preppin_data.not_null_202245_solution_profit.5148ed1480": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "profit", "model": "{{ get_where_subquery(ref('202245_solution')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.preppin_data.202245_solution"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "main", "schema": "main_dbt_test__audit", "fqn": ["preppin_data", "solutions", "not_null_202245_solution_profit"], "unique_id": "test.preppin_data.not_null_202245_solution_profit.5148ed1480", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "not_null_202245_solution_profit.sql", "original_file_path": "models/solutions/schema.yml", "name": "not_null_202245_solution_profit", "alias": "not_null_202245_solution_profit", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["202245_solution"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "target/compiled/preppin_data/models/solutions/schema.yml/not_null_202245_solution_profit.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1668146903.2311687, "compiled_code": "\n    \n    \n\n\n\nselect profit\nfrom \"main\".\"main\".\"202245_solution\"\nwhere profit is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "profit", "file_key_name": "models.202245_solution"}}, "sources": {}, "macros": {"macro.preppin_data.model_to_csv": {"unique_id": "macro.preppin_data.model_to_csv", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "macros/model_to_csv.sql", "original_file_path": "macros/model_to_csv.sql", "name": "model_to_csv", "macro_sql": "{% macro model_to_csv() %}\n    copy {{ this }} to 'solution_outputs/{{ this.identifier }}_output.csv' with (header 1, delimiter ',');\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "Macro to be used in a post-hook that copies the output of the  model which has just run to a `.csv` file. This macro is automatically applied to all models in the `solutions` folder per [dbt_project.yml](https://github.com/jharris126/preppin-data-dbt/blob/master/dbt_project.yml) settings.\n\n**Example Compiled SQL:**\n```sql\n  copy \"main\".\"main\".\"202201_solution\"\n  to 'solution_outputs/202201_solution_output.csv'\n  with (header 1, delimiter ',');\n```\n", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "preppin_data://macros/schema.yml", "arguments": [{"name": "None", "type": null, "description": ""}], "created_at": 1667868724.9000466, "supported_languages": null}, "macro.dbt_duckdb.duckdb_load_csv_rows": {"unique_id": "macro.dbt_duckdb.duckdb_load_csv_rows", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "name": "duckdb_load_csv_rows", "macro_sql": "{% macro duckdb_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    ?\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0332205, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "name": "duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n  {{ return(duckdb_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0334373, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/snapshot_merge.sql", "original_file_path": "macros/snapshot_merge.sql", "name": "duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    {% set insert_sql %}\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type = 'insert';\n    {% endset %}\n\n    {% do adapter.add_query(insert_sql, auto_begin=False) %}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id = {{ target.identifier }}.dbt_scd_id\n      and DBT_INTERNAL_SOURCE.dbt_change_type = 'update'\n      and {{ target.identifier }}.dbt_valid_to is null;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.035814, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        'main' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0378692, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"unique_id": "macro.dbt_duckdb.duckdb__any_value", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0578918, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"unique_id": "macro.dbt_duckdb.external_location", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "name": "external_location", "macro_sql": "{%- macro external_location(format) -%}\n  {{- adapter.external_root() }}/{{ this.identifier }}.{{ format }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.06068, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"unique_id": "macro.dbt_duckdb.duckdb__split_part", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "name": "duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    coalesce(string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ], '')\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.062916, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"unique_id": "macro.dbt_duckdb.duckdb__listagg", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n        regexp_replace(\n          trim(cast(\n            (array_agg(\n              {{ measure }}\n              {% if order_by_clause -%}\n              {{ order_by_clause }}\n              {%- endif %}\n            )[1:{{ limit_num }}])\n            as string), '[]'),\n        ', ',\n        {{ delimiter_text }},\n        'g')\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0655828, "supported_languages": null}, "macro.dbt_duckdb.duckdb__dateadd": {"unique_id": "macro.dbt_duckdb.duckdb__dateadd", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.06767, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"unique_id": "macro.dbt_duckdb.duckdb__last_day", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "name": "duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0689738, "supported_languages": null}, "macro.dbt_duckdb.materialization_table_duckdb": {"unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0772324, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "name": "materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set format = config.get('format', default='parquet') -%}\n  {%- set location = config.get('location', default=external_location(format)) -%}\n  {%- set delimiter = config.get('delimiter', default=',') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {%- set glue_database = config.get('glue_database', default='default') -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, format, delimiter) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation.include(database=False) }} as (\n        select * from '{{ location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {% do register_glue_table(glue_register, glue_database, target_relation, location, format) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.register_glue_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0837126, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "package_name": "dbt_duckdb", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0912452, "supported_languages": ["sql", "python"]}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0931494, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0951133, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.097149, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.0992293, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1020298, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1033258, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1041856, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1044323, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1077752, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.108358, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1088507, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1104586, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1108568, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1139112, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1142, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1157458, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1160476, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.116587, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1179006, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1180227, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1210647, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1213608, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.122718, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1228912, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1251636, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1252928, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1273782, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1277578, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1301913, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1303506, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1306415, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1308184, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1309867, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1311407, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1313043, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.131571, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.131813, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1319654, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1321237, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1322641, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1324196, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1326294, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1348572, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1352618, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1376586, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1381366, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1397514, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1399672, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1412153, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1413896, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1447704, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1450114, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.146674, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1470156, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1482894, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1486816, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1503322, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1506174, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1518714, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1520212, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1557178, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.15605, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1562362, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1573057, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1574216, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1610734, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1612444, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1668947, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1670527, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1687002, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1689658, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.169228, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1709642, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.171092, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1741817, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1747239, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1762269, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1763206, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1798148, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1802292, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.180725, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.182775, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1829767, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1831172, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1832507, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1833816, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1886055, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.194671, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1956036, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1958387, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1963003, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1965253, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1966608, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1967978, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1969287, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1970832, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1971958, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1977715, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1979737, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.1992338, "supported_languages": null}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.201049, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2014236, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2056665, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.207223, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2077315, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2093368, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2097452, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.236183, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2376888, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2378933, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.238092, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2383828, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.242164, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2433383, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2437387, "supported_languages": null}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2455742, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2512188, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.252863, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.253112, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2538927, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2541587, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2548904, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2614331, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.262833, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2641137, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2650263, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2680733, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2687619, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2694306, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2698114, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2705786, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.272795, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2730865, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2733386, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2736847, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2738802, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.27414, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2743256, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2746782, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2748857, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.27504, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2753315, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.281664, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.285573, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2870204, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2872136, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2878058, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2882502, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2908728, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2913635, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2918541, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.292273, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2923453, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2940326, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2942038, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2943957, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2947316, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2951322, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.295743, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.297238, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2973988, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2977333, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.2982588, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.300945, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.301072, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3012443, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3013537, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.301857, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3020833, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3021889, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3024313, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3027387, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3030229, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3032298, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3035927, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.304272, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3045154, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3047912, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3050163, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3062308, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3078744, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3083453, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3181028, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3182771, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3185277, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3188398, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3190775, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3194823, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3196597, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3198595, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3200288, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3201792, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3203726, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3206646, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3209026, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3214417, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3217258, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3218586, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3220358, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3252833, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3254554, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3258705, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3260665, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3264217, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3267176, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3273041, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3276582, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3284059, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3324063, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3327127, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.332895, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3331108, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3347392, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3350422, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3353455, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1667868724.3356705, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"unique_id": "macro.dbt_duckdb.duckdb__datediff", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.9607072, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.9906187, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.9908574, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.994782, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.9950883, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.9952798, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.995435, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.995609, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.9958546, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.996151, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.99648, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.9966671, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.996826, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n{{ return(adapter.dispatch(\"any_value\", \"dbt_utils\")(expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.998299, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"any_value\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"any_value\", \"dbt\")(expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145670.9986744, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(\n    model, combination_of_columns, quote_columns=false\n) %}\n{{\n    return(\n        adapter.dispatch(\"test_unique_combination_of_columns\", \"dbt_utils\")(\n            model, combination_of_columns, quote_columns\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.001384, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(\n    model, combination_of_columns, quote_columns=false\n) %}\n\n{% if not quote_columns %} {%- set column_list = combination_of_columns %}\n{% elif quote_columns %}\n{%- set column_list = [] %}\n{% for column in combination_of_columns -%}\n{% set column_list = column_list.append(adapter.quote(column)) %}\n{%- endfor %}\n{% else %}\n{{\n    exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\"\n        ~ quote\n        ~ \"'.'\"\n    )\n}}\n{% endif %}\n\n{%- set columns_csv = column_list | join(\", \") %}\n\n\nwith\n    validation_errors as (\n\n        select {{ columns_csv }}\n        from {{ model }}\n        group by {{ columns_csv }}\n        having count(*) > 1\n\n    )\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0022092, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\n{%- set deprecation_warning = \"     Warning: `dbt_utils.not_null_where` is no longer supported.     Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.     \" -%}\n{%- do exceptions.warn(deprecation_warning) -%}\n{{ return(adapter.dispatch(\"test_not_null_where\", \"dbt_utils\")(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0038722, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\n{{ return(test_not_null(model, column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0040977, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n{{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0124345, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n{%- do dbt_utils._is_relation(from, 'star') -%}\n{%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n{#- - Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%} {{ return(\"*\") }} {%- endif -%}\n\n{% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n{%- if cols | length <= 0 -%} {{- return(\"*\") -}}\n{%- else -%}\n{%- for col in cols %}\n{%- if relation_alias %} {{ relation_alias }}.\n{% else %}\n{%- endif -%} {{ adapter.quote(col) | trim }}\n{%- if prefix != \"\" or suffix != \"\" %}\nas {{ adapter.quote(prefix ~ col ~ suffix) | trim }}\n{%- endif -%}\n{%- if not loop.last %},{{ \"\\n  \" }}{% endif %}\n{%- endfor -%}\n{% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.01355, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(\n    schema, prefix, exclude=\"\", database=target.database\n) %}\n{{\n    return(\n        adapter.dispatch(\"get_relations_by_prefix\", \"dbt_utils\")(\n            schema, prefix, exclude, database\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0149946, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(\n    schema, prefix, exclude=\"\", database=target.database\n) %}\n\n{%- call statement('get_tables', fetch_result=True) %}\n\n{{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n{%- endcall -%}\n\n{%- set table_list = load_result(\"get_tables\") -%}\n\n{%- if table_list and table_list[\"table\"] -%}\n{%- set tbl_relations = [] -%}\n{%- for row in table_list[\"table\"] -%}\n{%- set tbl_relation = api.Relation.create(\n    database=database,\n    schema=row.table_schema,\n    identifier=row.table_name,\n    type=row.table_type,\n) -%} {%- do tbl_relations.append(tbl_relation) -%}\n{%- endfor -%}\n\n{{ return(tbl_relations) }}\n{%- else -%} {{ return([]) }}\n{%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0162613, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n{{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.017969, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n{%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n{%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n{# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%} {{ return(\"\") }} {% endif %}\n\n{%- set include_cols = [] %}\n{%- set cols = adapter.get_columns_in_relation(from) -%}\n{%- set except = except | map(\"lower\") | list %}\n{%- for col in cols -%}\n{%- if col.column|lower not in except -%}\n{% do include_cols.append(col.column) %}\n{%- endif %}\n{%- endfor %}\n\n{{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0189579, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n{{ return(adapter.dispatch(\"nullcheck_table\", \"dbt_utils\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0203185, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n{%- do dbt_utils._is_relation(relation, \"nullcheck_table\") -%}\n{%- do dbt_utils._is_ephemeral(relation, \"nullcheck_table\") -%}\n{% set cols = adapter.get_columns_in_relation(relation) %}\n\nselect {{ dbt_utils.nullcheck(cols) }}\nfrom {{ relation }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0207229, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n{{\n    return(\n        adapter.dispatch(\"test_equality\", \"dbt_utils\")(\n            model, compare_model, compare_columns\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.022364, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#- - Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc=set_diff) }}\n\n{#- - Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%} {{ return(\"\") }} {% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, \"test_equality\") -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n{%- if not compare_columns -%}\n{%- do dbt_utils._is_ephemeral(model, \"test_equality\") -%}\n{%- set compare_columns = adapter.get_columns_in_relation(model) | map(\n    attribute=\"quoted\"\n) -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(\", \") %}\n\nwith\n    a as (select * from {{ model }}),\n\n    b as (select * from {{ compare_model }}),\n\n    a_minus_b as (\n\n        select {{ compare_cols_csv }}\n        from a {{ except() }}\n        select {{ compare_cols_csv }}\n        from b\n\n    ),\n\n    b_minus_a as (\n\n        select {{ compare_cols_csv }}\n        from b {{ except() }}\n        select {{ compare_cols_csv }}\n        from a\n\n    ),\n\n    unioned as (\n\n        select 'a_minus_b' as which_diff, a_minus_b.*\n        from a_minus_b\n        union all\n        select 'b_minus_a' as which_diff, b_minus_a.*\n        from b_minus_a\n\n    )\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.023507, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n{%- if not (\n    obj is mapping\n    and obj.get(\"metadata\", {}).get(\"type\", \"\").endswith(\"Relation\")\n) -%}\n{%- do exceptions.raise_compiler_error(\n    \"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj\n) -%}\n{%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.040859, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n{{\n    return(\n        adapter.dispatch(\"test_fewer_rows_than\", \"dbt_utils\")(model, compare_model)\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0424664, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc=\"coalesce(row_count_delta, 0)\") }}\n\nwith\n    a as (select count(*) as count_our_model from {{ model }}),\n    b as (select count(*) as count_comparison_model from {{ compare_model }}),\n    counts as (select count_our_model, count_comparison_model from a cross join b),\n    final as (\n\n        select\n            *,\n            case\n                -- fail the test if we have more rows than the reference model and\n                -- return the row count delta\n                when count_our_model > count_comparison_model\n                then (count_our_model - count_comparison_model)\n                -- fail the test if they are the same number\n                when count_our_model = count_comparison_model\n                then 1\n                -- pass the test if the delta is positive (i.e. return the number 0)\n                else 0\n            end as row_count_delta\n        from counts\n\n    )\n\nselect *\nfrom final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0427456, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n{{ return(adapter.dispatch(\"date_trunc\", \"dbt_utils\")(datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0457485, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"date_trunc\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"date_trunc\", \"dbt\")(datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0461643, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n{{ return(adapter.dispatch(\"log_info\", \"dbt_utils\")(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.061249, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n{{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0614946, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n{% if kwargs.get(\"group_by\") %}\n{%- do exceptions.warn(error_message_group_by) -%}\n{%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n{% if not order_by %} {%- do exceptions.warn(error_message_order_by) -%} {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n{% if relation_alias %} {%- do exceptions.warn(error_message_alias) -%} {%- endif -%}\n\n{% set partition_by = partition_by or kwargs.get(\"group_by\") %}\n{% set relation = relation_alias or relation %}\n{% set order_by = order_by or \"'1'\" %}\n\n{{\n    return(\n        adapter.dispatch(\"deduplicate\", \"dbt_utils\")(relation, partition_by, order_by)\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0702214, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\nwith\n    row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }} order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\nselect distinct data.*\nfrom {{ relation }} as data\n{#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\nnatural join row_numbered\nwhere row_numbered.rn = 1\n\n{%- endmacro -%}\n\n    ", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0704663, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{\n        return(\n            dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)\n        )\n    }}\n\n    {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.070673, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\nselect distinct on ({{ partition_by }}) *\nfrom {{ relation }}\norder by {{ partition_by }}{{ \",\" ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0708656, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\nselect *\nfrom {{ relation }}\nqualify row_number() over (partition by {{ partition_by }} order by {{ order_by }}) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0710237, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\nselect unique.*\nfrom\n    (\n        select array_agg(original order by {{ order_by }} limit 1)[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0712352, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(\n    schema, prefix, exclude=\"\", database=target.database\n) %}\n{{\n    return(\n        adapter.dispatch(\"get_tables_by_prefix_sql\", \"dbt_utils\")(\n            schema, prefix, exclude, database\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0748844, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(\n    schema, prefix, exclude=\"\", database=target.database\n) %}\n\n{{\n    dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern=schema,\n        table_pattern=prefix ~ \"%\",\n        exclude=exclude,\n        database=database,\n    )\n}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0753164, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n{{\n    return(\n        adapter.dispatch(\"test_cardinality_equality\", \"dbt_utils\")(\n            model, column_name, to, field\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0768013, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\nwith\n    table_a as (\n        select {{ column_name }}, count(*) as num_rows\n        from {{ model }}\n        group by {{ column_name }}\n    ),\n\n    table_b as (\n        select {{ field }}, count(*) as num_rows from {{ to }} group by {{ field }}\n    ),\n\n    except_a as (select * from table_a {{ except() }} select * from table_b),\n\n    except_b as (select * from table_b {{ except() }} select * from table_a),\n\n    unioned as (\n        select *\n        from except_a\n        union all\n        select *\n        from except_b\n    )\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.077269, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n{{ return(adapter.dispatch(\"length\", \"dbt_utils\")(expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0810935, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"length\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"length\", \"dbt\")(expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0814931, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%} acos(-1) * {{ degrees }} / 180 {%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0839877, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit=\"mi\") -%}\n{{\n    return(\n        adapter.dispatch(\"haversine_distance\", \"dbt_utils\")(\n            lat1, lon1, lat2, lon2, unit\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0844107, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit=\"mi\") -%}\n{%- if unit == \"mi\" %} {% set conversion_rate = 1 %}\n{% elif unit == \"km\" %} {% set conversion_rate = 1.60934 %}\n{% else %}\n{{\n    exceptions.raise_compiler_error(\n        \"unit input must be one of 'mi' or 'km'. Got \" ~ unit\n    )\n}}\n{% endif %}\n\n2\n* 3961\n* asin(\n    sqrt(\n        power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2)\n        + cos(radians({{ lat1 }}))\n        * cos(radians({{ lat2 }}))\n        * power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2)\n    )\n)\n* {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0850182, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit=\"mi\") -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == \"mi\" %} {% set conversion_rate = 1 %}\n{% elif unit == \"km\" %} {% set conversion_rate = 1.60934 %}\n{% else %}\n{{\n    exceptions.raise_compiler_error(\n        \"unit input must be one of 'mi' or 'km'. Got \" ~ unit\n    )\n}}\n{% endif %}\n2\n* 3961\n* asin(\n    sqrt(\n        power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2)\n        + cos({{ radians_lat1 }})\n        * cos({{ radians_lat2 }})\n        * power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2)\n    )\n)\n* {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0858824, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\n{%- set error_message = \"     Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\     Use `adapter.quote` instead. The {}.{} model triggered this warning. \\     \".format(\n    model.package_name, model.name\n) -%}\n{%- do exceptions.warn(error_message) -%}\n{{ return(adapter.dispatch(\"identifier\", \"dbt_utils\")(value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0887609, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%} \"{{ value }}\" {%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0888865, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%} `{{ value }}` {%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0889912, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n{{ return(adapter.dispatch(\"position\", \"dbt_utils\")(substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.090548, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"position\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"position\", \"dbt\")(substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0909357, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n{{\n    return(\n        adapter.dispatch(\"test_equal_rowcount\", \"dbt_utils\")(model, compare_model)\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0925636, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#- - Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc=\"coalesce(diff_count, 0)\") }}\n\n{#- - Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%} {{ return(\"\") }} {% endif %}\n\nwith\n    a as (select count(*) as count_a from {{ model }}),\n    b as (select count(*) as count_b from {{ compare_model }}),\n    final as (\n\n        select count_a, count_b, abs(count_a - count_b) as diff_count\n        from a\n        cross join b\n\n    )\n\nselect *\nfrom final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0928915, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n{{\n    return(\n        adapter.dispatch(\"test_not_null_proportion\", \"dbt_utils\")(model, **kwargs)\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0991344, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get(\"column_name\", kwargs.get(\"arg\")) %}\n{% set at_least = kwargs.get(\"at_least\", kwargs.get(\"arg\")) %}\n{% set at_most = kwargs.get(\"at_most\", kwargs.get(\"arg\", 1)) %}\n\nwith\n    validation as (\n        select\n            sum(case when {{ column_name }} is null then 0 else 1 end)\n            / cast(count(*) as numeric) as not_null_proportion\n        from {{ model }}\n    ),\n    validation_errors as (\n        select not_null_proportion\n        from validation\n        where\n            not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n    )\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.0996969, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n{{ return(adapter.dispatch(\"get_url_parameter\", \"dbt_utils\")(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.100979, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }}, '')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.101406, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(\n    model,\n    lower_bound_column,\n    upper_bound_column,\n    partition_by=None,\n    gaps=\"allowed\",\n    zero_length_range_allowed=False\n) %}\n{{\n    return(\n        adapter.dispatch(\"test_mutually_exclusive_ranges\", \"dbt_utils\")(\n            model,\n            lower_bound_column,\n            upper_bound_column,\n            partition_by,\n            gaps,\n            zero_length_range_allowed,\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.109454, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(\n    model,\n    lower_bound_column,\n    upper_bound_column,\n    partition_by=None,\n    gaps=\"allowed\",\n    zero_length_range_allowed=False\n) %}\n{% if gaps == \"not_allowed\" %}\n{% set allow_gaps_operator = \"=\" %} {% set allow_gaps_operator_in_words = \"equal_to\" %}\n{% elif gaps == \"allowed\" %}\n{% set allow_gaps_operator = \"<=\" %}\n{% set allow_gaps_operator_in_words = \"less_than_or_equal_to\" %}\n{% elif gaps == \"required\" %}\n{% set allow_gaps_operator = \"<\" %} {% set allow_gaps_operator_in_words = \"less_than\" %}\n{% else %}\n{{\n    exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\"\n        ~ gaps\n        ~ \"'.'\"\n    )\n}}\n{% endif %}\n{% if not zero_length_range_allowed %}\n{% set allow_zero_length_operator = \"<\" %}\n{% set allow_zero_length_operator_in_words = \"less_than\" %}\n{% elif zero_length_range_allowed %}\n{% set allow_zero_length_operator = \"<=\" %}\n{% set allow_zero_length_operator_in_words = \"less_than_or_equal_to\" %}\n{% else %}\n{{\n    exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\"\n        ~ zero_length_range_allowed\n        ~ \"'.'\"\n    )\n}}\n{% endif %}\n\n{% set partition_clause = \"partition by \" ~ partition_by if partition_by else \"\" %}\n\nwith\n    window_functions as (\n\n        select\n            {% if partition_by %} {{ partition_by }} as partition_by_col, {% endif %}\n            {{ lower_bound_column }} as lower_bound,\n            {{ upper_bound_column }} as upper_bound,\n\n            lead({{ lower_bound_column }}) over (\n                {{ partition_clause }}\n                order by {{ lower_bound_column }}, {{ upper_bound_column }}\n            ) as next_lower_bound,\n\n            row_number() over (\n                {{ partition_clause }}\n                order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n            )\n            = 1 as is_last_record\n\n        from {{ model }}\n\n    ),\n\n    calc as (\n        -- We want to return records where one of our assumptions fails, so we'll use\n        -- the `not` function with `and` statements so we can write our assumptions\n        -- nore cleanly\n        select\n            *,\n\n            -- For each record: lower_bound should be < upper_bound.\n            -- Coalesce it to return an error on the null case (implicit assumption\n            -- these columns are not_null)\n            coalesce(\n                lower_bound {{ allow_zero_length_operator }} upper_bound, false\n            ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n            -- For each record: upper_bound {{ allow_gaps_operator }} the next\n            -- lower_bound.\n            -- Coalesce it to handle null cases for the last record.\n            coalesce(\n                upper_bound {{ allow_gaps_operator }} next_lower_bound,\n                is_last_record,\n                false\n            ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n        from window_functions\n\n    ),\n\n    validation_errors as (\n\n        select *\n        from calc\n\n        where\n            not (\n                -- THE FOLLOWING SHOULD BE TRUE --\n                lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n                and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n            )\n    )\n\nselect *\nfrom validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1111434, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n{{ return(adapter.dispatch(\"right\", \"dbt_utils\")(string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1124551, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"right\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"right\", \"dbt\")(string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1127648, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n{{ return(adapter.dispatch(\"intersect\", \"dbt_utils\")()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1150057, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n{% do dbt_utils.xdb_deprecation_warning(\"intersect\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"intersect\", \"dbt\")()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1155212, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{{\n    return(\n        adapter.dispatch(\"test_sequential_values\", \"dbt_utils\")(\n            model, column_name, interval, datepart\n        )\n    )\n}}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1173773, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(\n    model, column_name, interval=1, datepart=None\n) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith\n    windowed as (\n\n        select\n            {{ column_name }},\n            lag({{ column_name }}) over (\n                order by {{ column_name }}\n            ) as {{ previous_column_name }}\n        from {{ model }}\n    ),\n\n    validation_errors as (\n        select *\n        from windowed\n        {% if datepart %}\n        where\n            not (\n                cast({{ column_name }} as {{ type_timestamp() }}) = cast(\n                    {{ dateadd(datepart, interval, previous_column_name) }}\n                    as {{ type_timestamp() }}\n                )\n            )\n        {% else %}\n        where not ({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n        {% endif %}\n    )\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.118006, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(\n    schema_pattern, table_pattern, exclude=\"\", database=target.database\n) %}\n{{\n    return(\n        adapter.dispatch(\"get_relations_by_pattern\", \"dbt_utils\")(\n            schema_pattern, table_pattern, exclude, database\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1197395, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(\n    schema_pattern, table_pattern, exclude=\"\", database=target.database\n) %}\n\n{%- call statement('get_tables', fetch_result=True) %}\n\n{{\n    dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern, table_pattern, exclude, database\n    )\n}}\n\n{%- endcall -%}\n\n{%- set table_list = load_result(\"get_tables\") -%}\n\n{%- if table_list and table_list[\"table\"] -%}\n{%- set tbl_relations = [] -%}\n{%- for row in table_list[\"table\"] -%}\n{%- set tbl_relation = api.Relation.create(\n    database=database,\n    schema=row.table_schema,\n    identifier=row.table_name,\n    type=row.table_type,\n) -%} {%- do tbl_relations.append(tbl_relation) -%}\n{%- endfor -%}\n\n{{ return(tbl_relations) }}\n{%- else -%} {{ return([]) }}\n{%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1207545, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(\n    schema_pattern, table_pattern, exclude=\"\", database=target.database\n) %}\n{{\n    return(\n        adapter.dispatch(\"get_tables_by_pattern_sql\", \"dbt_utils\")(\n            schema_pattern, table_pattern, exclude, database\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1234012, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(\n    schema_pattern, table_pattern, exclude=\"\", database=target.database\n) %}\n\nselect distinct\n    table_schema as {{ adapter.quote(\"table_schema\") }},\n    table_name as {{ adapter.quote(\"table_name\") }},\n    {{ dbt_utils.get_table_types_sql() }}\nfrom {{ database }}.information_schema.tables\nwhere\n    table_schema ilike '{{ schema_pattern }}'\n    and table_name ilike '{{ table_pattern }}'\n    and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1237752, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(\n    schema_pattern, table_pattern, exclude=\"\", database=target.database\n) %}\n\n    {% if \"%\" in schema_pattern %}\n    {% set schemata = dbt_utils._bigquery__get_matching_schemata(\n    schema_pattern, database\n) %}\n    {% else %} {% set schemata = [schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n    {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1245248, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n    {% set results = run_query(sql) %}\n\n    {% set schemata = results.columns[\"schema_name\"].values() %}\n\n    {{ return(schemata) }}\n\n    {% else %} {{ return([]) }}\n\n    {% endif %}\n\n\n    {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1250832, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n{{ return(adapter.dispatch(\"pretty_log_format\", \"dbt_utils\")(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1262946, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n{{ return(dbt_utils.pretty_time() ~ \" + \" ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1265109, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format=\"%H:%M:%S\") %}\n{{ return(adapter.dispatch(\"pretty_time\", \"dbt_utils\")(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.12947, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format=\"%H:%M:%S\") %}\n{{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1296914, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(\n    model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\"\n) %}\n{{\n    return(\n        adapter.dispatch(\"test_relationships_where\", \"dbt_utils\")(\n            model, column_name, to, field, from_condition, to_condition\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1338222, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(\n    model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\"\n) %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\nwith\n    left_table as (\n\n        select {{ column_name }} as id\n\n        from {{ model }}\n\n        where {{ column_name }} is not null and {{ from_condition }}\n\n    ),\n\n    right_table as (\n\n        select {{ field }} as id\n\n        from {{ to }}\n\n        where {{ field }} is not null and {{ to_condition }}\n\n    ),\n\n    exceptions as (\n\n        select left_table.id, right_table.id as right_id\n\n        from left_table\n\n        left join right_table on left_table.id = right_table.id\n\n        where right_table.id is null\n\n    )\n\nselect *\nfrom exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1343372, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n{{ return(adapter.dispatch(\"nullcheck\", \"dbt_utils\")(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1368403, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n{% if col.is_string() -%} nullif({{ col.name }}, '') as {{ col.name }}\n\n{%- else -%} {{ col.name }}\n\n{%- endif -%}\n\n{%- if not loop.last -%}, {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1373978, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n{{\n    return(\n        adapter.dispatch(\"width_bucket\", \"dbt_utils\")(\n            expr, min_value, max_value, num_buckets\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1469219, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n(\n    -- to break ties when the amount is eaxtly at the bucket egde\n    case\n        when\n            mod(\n                {{ dbt.safe_cast(expr, type_numeric()) }},\n                {{ dbt.safe_cast(bin_size, type_numeric()) }}\n            )\n            = 0\n        then 1\n        else 0\n    end\n)\n-- Anything over max_value goes the N+1 bucket\n+ least(ceil(({{ expr }} - {{ min_value }}) /{{ bin_size }}), {{ num_buckets }} + 1)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1475081, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n(\n    -- to break ties when the amount is exactly at the bucket edge\n    case\n        when\n            {{ dbt.safe_cast(expr, type_numeric()) }}\n            % {{ dbt.safe_cast(bin_size, type_numeric()) }}\n            = 0\n        then 1\n        else 0\n    end\n)\n-- Anything over max_value goes the N+1 bucket\n+ least(ceil(({{ expr }} - {{ min_value }}) /{{ bin_size }}), {{ num_buckets }} + 1)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1479528, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\nwidth_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1481607, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition=\"1=1\") %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n{{\n    return(\n        adapter.dispatch(\"test_expression_is_true\", \"dbt_utils\")(\n            model, expression, column_name, condition\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.149681, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (select * from {{ model }} where {{ condition }})\n\nselect *\nfrom meet_condition\n{% if column_name is none %} where not ({{ expression }})\n{%- else %} where not ({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1500278, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n{{ return(adapter.dispatch(\"group_by\", \"dbt_utils\")(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1521554, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\ngroup by\n    {% for i in range(1, n + 1) -%} {{ i }}{{ ',' if not loop.last }} {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.152441, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n{{ return(adapter.dispatch(\"get_powers_of_two\", \"dbt_utils\")(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1601684, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n{% if upper_bound <= 0 %}\n{{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n{% endif %}\n\n{% for _ in range(1, 100) %}\n{% if upper_bound <= 2**loop.index %} {{ return(loop.index) }}{% endif %}\n{% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.160636, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n{{ return(adapter.dispatch(\"generate_series\", \"dbt_utils\")(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1608276, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n{% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\nwith\n    p as (\n        select 0 as generated_number\n        union all\n        select 1\n    ),\n    unioned as (\n\n        select\n\n            {% for i in range(n) %}\n            p{{ i }}.generated_number * power(2, {{ i }})\n            {% if not loop.last %} + {% endif %}\n            {% endfor %}\n            + 1 as generated_number\n\n        from\n\n        {% for i in range(n) %}\n            p as p{{ i }} {% if not loop.last %} cross join {% endif %}\n        {% endfor %}\n\n    )\n\nselect *\nfrom unioned\nwhere generated_number <= {{ upper_bound }}\norder by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1614616, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n{{\n    return(\n        adapter.dispatch(\"get_intervals_between\", \"dbt_utils\")(\n            start_date, end_date, datepart\n        )\n    )\n}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1633875, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n{%- call statement('get_intervals_between', fetch_result=True) %}\n\nselect\n    {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result(\"get_intervals_between\") -%}\n\n    {%- if value_list and value_list[\"data\"] -%}\n    {%- set values = value_list[\"data\"] | map(attribute=0) | list %}\n    {{ return(values[0]) }}\n    {%- else -%} {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1642108, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{\n        return(\n            adapter.dispatch(\"date_spine\", \"dbt_utils\")(\n                datepart, start_date, end_date\n            )\n        )\n    }}\n    {%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1645029, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\nwith\n    rawdata as (\n\n        {{\n            dbt_utils.generate_series(\n                dbt_utils.get_intervals_between(start_date, end_date, datepart)\n            )\n        }}\n\n    ),\n\n    all_periods as (\n\n        select\n            (\n                {{\n                    dateadd(\n                        datepart, \"row_number() over (order by 1) - 1\", start_date\n                    )\n                }}\n            ) as date_{{ datepart }}\n        from rawdata\n\n    ),\n\n    filtered as (select * from all_periods where date_{{ datepart }} <= {{ end_date }})\n\nselect *\nfrom filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1648746, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n{{\n    return(\n        adapter.dispatch(\"dateadd\", \"dbt_utils\")(\n            datepart, interval, from_date_or_timestamp\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.166219, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n{% do dbt_utils.xdb_deprecation_warning(\"dateadd\", model.package_name, model.name) %}\n{{\n    return(\n        adapter.dispatch(\"dateadd\", \"dbt\")(datepart, interval, from_date_or_timestamp)\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.166723, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n{{ return(adapter.dispatch(\"get_query_results_as_dict\", \"dbt_utils\")(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1684005, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n{%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n{{ query }}\n\n{%- endcall -%}\n\n{% set sql_results = {} %}\n\n{%- if execute -%}\n{% set sql_results_table = load_result(\"get_query_results\").table.columns %}\n{% for column_name, column in sql_results_table.items() %}\n{% do sql_results.update({column_name: column.values()}) %}\n{% endfor %}\n{%- endif -%}\n\n{{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.169219, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n{{ return(adapter.dispatch(\"bool_or\", \"dbt_utils\")(expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.170618, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"bool_or\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"bool_or\", \"dbt\")(expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.170961, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n{{\n    return(\n        adapter.dispatch(\"split_part\", \"dbt_utils\")(\n            string_text, delimiter_text, part_number\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1723554, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n{% do dbt_utils.xdb_deprecation_warning(\"split_part\", model.package_name, model.name) %}\n{{\n    return(\n        adapter.dispatch(\"split_part\", \"dbt\")(\n            string_text, delimiter_text, part_number\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1727948, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n{{ return(adapter.dispatch(\"safe_cast\", \"dbt_utils\")(field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.17397, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n{% do dbt_utils.xdb_deprecation_warning(\"safe_cast\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"safe_cast\", \"dbt\")(field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1743746, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n{{\n    return(\n        adapter.dispatch(\"datediff\", \"dbt_utils\")(first_date, second_date, datepart)\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1758697, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n{% do dbt_utils.xdb_deprecation_warning(\"datediff\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"datediff\", \"dbt\")(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1763825, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(\n    model, column_name, min_value=none, max_value=none, inclusive=true\n) %}\n{{\n    return(\n        adapter.dispatch(\"test_accepted_range\", \"dbt_utils\")(\n            model, column_name, min_value, max_value, inclusive\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1799564, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(\n    model, column_name, min_value=none, max_value=none, inclusive=true\n) %}\n\nwith\n    meet_condition as (select * from {{ model }}),\n\n    validation_errors as (\n        select *\n        from meet_condition\n        where\n            -- never true, defaults to an empty result set. Exists to ensure any combo\n            -- of the `or` clauses below succeeds\n            1 = 2\n\n            {%- if min_value is not none %}\n            -- records with a value >= min_value are permitted. The `not` flips this\n            -- to find records that don't meet the rule.\n            or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n            {%- endif %}\n\n            {%- if max_value is not none %}\n            -- records with a value <= max_value are permitted. The `not` flips this\n            -- to find records that don't meet the rule.\n            or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n            {%- endif %}\n    )\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1806443, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n{{ return(adapter.dispatch(\"concat\", \"dbt_utils\")(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1823344, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"concat\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"concat\", \"dbt\")(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1826768, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n{{ return(adapter.dispatch(\"except\", \"dbt_utils\")()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1848185, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n{% do dbt_utils.xdb_deprecation_warning(\"except\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"except\", \"dbt\")()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1852627, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n{{ return(adapter.dispatch(\"hash\", \"dbt_utils\")(field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1877675, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"hash\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"hash\", \"dbt\")(field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1881928, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n{{ return(adapter.dispatch(\"last_day\", \"dbt_utils\")(date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.189577, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n{% do dbt_utils.xdb_deprecation_warning(\"last_day\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"last_day\", \"dbt\")(date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1902313, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(\n    measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none\n) -%}\n{{\n    return(\n        adapter.dispatch(\"listagg\", \"dbt_utils\")(\n            measure, delimiter_text, order_by_clause, limit_num\n        )\n    )\n}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1921656, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(\n    measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none\n) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"listagg\", model.package_name, model.name) %}\n{{\n    return(\n        adapter.dispatch(\"listagg\", \"dbt\")(\n            measure, delimiter_text, order_by_clause, limit_num\n        )\n    )\n}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1926842, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n{{ return(adapter.dispatch(\"replace\", \"dbt_utils\")(field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1944478, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n{% do dbt_utils.xdb_deprecation_warning(\"replace\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"replace\", \"dbt\")(field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.1950269, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n{%- set error_message = (\n    \"Warning: the `\"\n    ~ macro\n    ~ \"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\"\n    ~ macro\n    ~ \"` (no prefix) instead. The \"\n    ~ package\n    ~ \".\"\n    ~ model\n    ~ \" model triggered this warning.\"\n) -%}\n{%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2022228, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n{%- set error_message = (\n    \"Warning: the `\"\n    ~ macro\n    ~ \"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \"\n    ~ package\n    ~ \".\"\n    ~ model\n    ~ \" model triggered this warning.\"\n) -%}\n{%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2025464, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n{{ return(adapter.dispatch(\"test_not_constant\", \"dbt_utils\")(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2041104, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n{# In TSQL, subquery aggregate columns need aliases #}\n{# thus: a filler col name, 'filler_column' #}\nselect count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2043278, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(\n    table,\n    column,\n    order_by=\"count(*) desc\",\n    max_records=none,\n    default=none,\n    where=none\n) -%}\n{{\n    return(\n        adapter.dispatch(\"get_column_values\", \"dbt_utils\")(\n            table, column, order_by, max_records, default, where\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2066286, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(\n    table,\n    column,\n    order_by=\"count(*) desc\",\n    max_records=none,\n    default=none,\n    where=none\n) -%}\n{#- - Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n{% set default = [] if not default %} {{ return(default) }}\n{% endif %}\n\n{%- do dbt_utils._is_ephemeral(table, \"get_column_values\") -%}\n\n{# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n{# TODO: Change the method signature in a future 0.x.0 release #}\n{%- set target_relation = table -%}\n\n{# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n{% set relation_exists = (load_relation(target_relation)) is not none %}\n\n{%- call statement('get_column_values', fetch_result=true) %}\n\n{%- if not relation_exists and default is none -%}\n\n{{\n    exceptions.raise_compiler_error(\n        \"In get_column_values(): relation \"\n        ~ target_relation\n        ~ \" does not exist and no default value was provided.\"\n    )\n}}\n\n{%- elif not relation_exists and default is not none -%}\n\n{{\n    log(\n        \"Relation \"\n        ~ target_relation\n        ~ \" does not exist. Returning the default value: \"\n        ~ default\n    )\n}} {{ return(default) }}\n\n{%- else -%}\nselect {{ column }} as value\n\nfrom {{ target_relation }}\n\n{% if where is not none %} where {{ where }}\n{% endif %}\n\ngroup by {{ column }}\norder by {{ order_by }}\n\n{% if max_records is not none %} limit {{ max_records }}\n{% endif %}\n\n{% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result(\"get_column_values\") -%}\n\n    {%- if value_list and value_list[\"data\"] -%}\n    {%- set values = value_list[\"data\"] | map(attribute=0) | list %}\n    {{ return(values) }}\n    {%- else -%} {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2084465, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n{%- if obj.is_cte -%}\n{% set ephemeral_prefix = api.Relation.add_ephemeral_prefix(\"\") %}\n{% if obj.name.startswith(ephemeral_prefix) %}\n{% set model_name = obj.name[(ephemeral_prefix | length) :] %}\n{% else %} {% set model_name = obj.name %}\n{%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n{%- do exceptions.raise_compiler_error(error_message) -%}\n{%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2109702, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n{{ return(adapter.dispatch(\"test_at_least_one\", \"dbt_utils\")(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2128778, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom\n    (\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n        select count({{ column_name }}) as filler_column\n\n        from {{ model }}\n\n        having count({{ column_name }}) = 0\n\n    ) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2132769, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n{{\n    return(\n        adapter.dispatch(\"test_not_accepted_values\", \"dbt_utils\")(\n            model, column_name, values, quote\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2153242, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith\n    all_values as (select distinct {{ column_name }} as value_field from {{ model }}),\n\n    validation_errors as (\n\n        select value_field\n\n        from all_values\n        where\n            value_field in (\n                {% for value in values -%}\n                {% if quote -%}'{{ value }}'\n                {%- else -%}{{ value }}\n                {%- endif -%}\n                {%- if not loop.last -%},{%- endif %}\n                {%- endfor %}\n            )\n\n    )\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.215734, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n{{ return(adapter.dispatch(\"get_table_types_sql\", \"dbt_utils\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2171788, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\ncase\n    table_type\n    when 'BASE TABLE'\n    then 'table'\n    when 'EXTERNAL TABLE'\n    then 'external'\n    when 'MATERIALIZED VIEW'\n    then 'materializedview'\n    else lower(table_type)\nend as {{ adapter.quote(\"table_type\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2173808, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\ncase\n    table_type\n    when 'BASE TABLE'\n    then 'table'\n    when 'FOREIGN'\n    then 'external'\n    when 'MATERIALIZED VIEW'\n    then 'materializedview'\n    else lower(table_type)\nend as {{ adapter.quote(\"table_type\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2175357, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n{# needed for safe_add to allow for non-keyword arguments see SO post #}\n{# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n{% set frustrating_jinja_feature = varargs %}\n{{ return(adapter.dispatch(\"safe_add\", \"dbt_utils\")(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2198021, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n{% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields | join(\" +\\n  \") }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.220218, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\n{%- set deprecation_warning = \"     Warning: `dbt_utils.unique_where` is no longer supported.     Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.     \" -%}\n{%- do exceptions.warn(deprecation_warning) -%}\n{{ return(adapter.dispatch(\"test_unique_where\", \"dbt_utils\")(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.221519, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\n{{ return(test_unique(model, column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2216966, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub(\"[ -]+\", \"_\", string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub(\"[^a-z0-9_]+\", \"\", string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668145671.2244778, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"unique_id": "macro.dbt_duckdb.duckdb__create_schema", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4542837, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4545472, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from information_schema.schemata\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4547384, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from information_schema.schemata\n        where schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4549499, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=False, schema=(not temporary)) }}\n    as (\n      {{ compiled_code }}\n    );\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4556832, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"unique_id": "macro.dbt_duckdb.py_write_table", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n# MODEL ----------\n{{ compiled_code }}\n\nextend_globals = {\n  \"config\": config,\n  \"this\": this,\n  \"ref\": ref,\n  \"source\": source\n}\n\nglobals().update(extend_globals)\n\ndbt = dbtObj(load_df_function)\ndf = model(dbt, con)\n\n# make sure pandas exists before using it\ntry:\n  import pandas\n  pandas_available = True\nexcept ImportError:\n  pandas_available = False\n\n# make sure pyarrow exists before using it\ntry:\n  import pyarrow\n  pyarrow_available = True\nexcept ImportError:\n  pyarrow_available = False\n\nif pandas_available and isinstance(df, pandas.core.frame.DataFrame):\n  con.execute('create table {{ relation.include(database=False, schema=(not temporary)) }} as select * from df')\nelif pyarrow_available and isinstance(df, pyarrow.Table):\n  con.execute('create table {{ relation.include(database=False, schema=(not temporary)) }} as select * from df')\nelse:\n  raise Exception( str(type(df)) + \" is not a supported type for dbt Python materialization\")\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4560416, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation.include(database=False) }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.456325, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4567506, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4570508, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation.include(database=False) }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.457285, "supported_languages": null}, "macro.dbt_duckdb.duckdb__truncate_relation": {"unique_id": "macro.dbt_duckdb.duckdb__truncate_relation", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__truncate_relation", "macro_sql": "{% macro duckdb__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    DELETE FROM {{ relation.include(database=False) }} WHERE 1=1\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.457484, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4577715, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4581077, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4581845, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4583526, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.458458, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4585967, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt_duckdb.duckdb__get_incremental_delete_insert_sql", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__get_incremental_delete_insert_sql", "macro_sql": "{% macro duckdb__get_incremental_delete_insert_sql(arg_dict) %}\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"].include(database=False), arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4589336, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_append_sql": {"unique_id": "macro.dbt_duckdb.duckdb__get_incremental_append_sql", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "duckdb__get_incremental_append_sql", "macro_sql": "{% macro duckdb__get_incremental_append_sql(arg_dict) %}\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"].include(database=False), arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4591808, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"unique_id": "macro.dbt_duckdb.location_exists", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4593203, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"unique_id": "macro.dbt_duckdb.write_to_file", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "write_to_file", "macro_sql": "{% macro write_to_file(relation, location, format, delimiter=',') -%}\n  {% if format == 'parquet' %}\n    {% set copy_to %}\n      copy {{ relation }} to '{{ location }}' (FORMAT 'parquet');\n    {% endset %}\n\n  {% elif format == 'csv' %}\n    {% set copy_to %}\n      copy {{ relation }} to '{{ location }}' (HEADER 1, DELIMITER '{{ delimiter }}');\n    {% endset %}\n\n  {% else %}\n      {% do exceptions.raise_compiler_error(\"%s external format is not supported!\" % format) %}\n  {% endif %}\n\n  {% call statement('write_to_file') -%}\n    {{ copy_to }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.459873, "supported_languages": null}, "macro.dbt_duckdb.register_glue_table": {"unique_id": "macro.dbt_duckdb.register_glue_table", "package_name": "dbt_duckdb", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "register_glue_table", "macro_sql": "{% macro register_glue_table(register, glue_database, relation, location, format) -%}\n  {% if location.startswith(\"s3://\") and register == true %}\n    {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n    {% do adapter.register_glue_table(glue_database, relation.identifier, column_list, location, format) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4602604, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4620788, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4622912, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4624755, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.462581, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4627397, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4628105, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.462963, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4631286, "supported_languages": null}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4677174, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4680638, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.468243, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4683373, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4685657, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4686937, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.46891, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4699168, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4701068, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4703543, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4709055, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4776504, "supported_languages": ["sql"]}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4818225, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4819944, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4822142, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4830377, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4832253, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4834123, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4848452, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4862137, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n{{ adapter.dispatch(\"cast_bool_to_text\", \"dbt_utils\")(field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4878533, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n{% do dbt_utils.xdb_deprecation_warning(\n    \"cast_bool_to_text\", model.package_name, model.name\n) %}\n{{\n    adapter.dispatch(\n        \"cast_bool_to_text\",\n        \"dbt\",\n    )(field)\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4882166, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(\n    relation=none,\n    cast_to=\"varchar\",\n    exclude=none,\n    remove=none,\n    field_name=\"field_name\",\n    value_name=\"value\",\n    table=none\n) -%}\n{{\n    return(\n        adapter.dispatch(\"unpivot\", \"dbt_utils\")(\n            relation, cast_to, exclude, remove, field_name, value_name, table\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4920816, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(\n    relation=none,\n    cast_to=\"varchar\",\n    exclude=none,\n    remove=none,\n    field_name=\"field_name\",\n    value_name=\"value\",\n    table=none\n) -%}\n\n{% if table %}\n{%- set error_message = \"             Warning: the `unpivot` macro no longer accepts a `table` parameter. \\             This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\             The {}.{} model triggered this warning. \\             \".format(\n    model.package_name, model.name\n) -%}\n{%- do exceptions.warn(error_message) -%}\n{% endif %}\n\n{% if relation and table %}\n{{\n    exceptions.raise_compiler_error(\n        \"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\"\n    )\n}}\n{% elif not relation and table %} {% set relation = table %}\n{% elif not relation and not table %}\n{{\n    exceptions.raise_compiler_error(\n        \"Error: argument `relation` is required for `unpivot` macro.\"\n    )\n}}\n{% endif %}\n\n{%- set exclude = exclude if exclude is not none else [] %}\n{%- set remove = remove if remove is not none else [] %}\n\n{%- set include_cols = [] %}\n\n{%- set table_columns = {} %}\n\n{%- do table_columns.update({relation: []}) %}\n\n{%- do dbt_utils._is_relation(relation, \"unpivot\") -%}\n{%- do dbt_utils._is_ephemeral(relation, \"unpivot\") -%}\n{%- set cols = adapter.get_columns_in_relation(relation) %}\n\n{%- for col in cols -%}\n{%- if col.column.lower() not in remove | map(\n    \"lower\"\n) and col.column.lower() not in exclude | map(\"lower\") -%}\n{% do include_cols.append(col) %}\n{%- endif %}\n{%- endfor %}\n\n\n{%- for col in include_cols -%}\nselect\n    {%- for exclude_col in exclude %} {{ exclude_col }}, {%- endfor %}\n\n    cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n    cast(\n        {% if col.data_type == \"boolean\" %}{{ cast_bool_to_text(col.column) }}\n        {% else %}{{ col.column }}\n        {% endif %} as {{ cast_to }}\n    ) as {{ value_name }}\n\nfrom {{ relation }}\n\n{% if not loop.last -%}\nunion all\n{% endif -%}\n{%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4971533, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n{{ return(adapter.dispatch(\"string_literal\", \"dbt_utils\")(value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.4987001, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n{% do dbt_utils.xdb_deprecation_warning(\n    \"string_literal\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\n            \"string_literal\",\n            \"dbt\",\n        )(value)\n    )\n}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.499037, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(\n    relations,\n    column_override=none,\n    include=[],\n    exclude=[],\n    source_column_name=\"_dbt_source_relation\",\n    where=none\n) -%}\n{{\n    return(\n        adapter.dispatch(\"union_relations\", \"dbt_utils\")(\n            relations, column_override, include, exclude, source_column_name, where\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5021906, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(\n    relations,\n    column_override=none,\n    include=[],\n    exclude=[],\n    source_column_name=\"_dbt_source_relation\",\n    where=none\n) -%}\n\n{%- if exclude and include -%}\n{{\n    exceptions.raise_compiler_error(\n        \"Both an exclude and include list were provided to the `union` macro. Only one is allowed\"\n    )\n}}\n{%- endif -%}\n\n{#- - Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n{%- if not execute %} {{ return(\"\") }} {% endif -%}\n\n{%- set column_override = column_override if column_override is not none else {} -%}\n\n{%- set relation_columns = {} -%}\n{%- set column_superset = {} -%}\n\n{%- for relation in relations -%}\n\n{%- do relation_columns.update({relation: []}) -%}\n\n{%- do dbt_utils._is_relation(relation, \"union_relations\") -%}\n{%- do dbt_utils._is_ephemeral(relation, \"union_relations\") -%}\n{%- set cols = adapter.get_columns_in_relation(relation) -%}\n{%- for col in cols -%}\n\n{#- If an exclude list was provided and the column is in the list, do nothing -#}\n{%- if exclude and col.column in exclude -%}\n\n{#- If an include list was provided and the column is not in the list, do nothing -#}\n{%- elif include and col.column not in include -%}\n\n{#- Otherwise add the column to the column superset -#}\n{%- else -%}\n\n{#- update the list of columns in this relation -#}\n{%- do relation_columns[relation].append(col.column) -%}\n\n{%- if col.column in column_superset -%}\n\n{%- set stored = column_superset[col.column] -%}\n{%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n{%- do column_superset.update({col.column: col}) -%}\n\n{%- endif %}\n\n{%- else -%} {%- do column_superset.update({col.column: col}) -%}\n\n{%- endif -%}\n\n{%- endif -%}\n\n{%- endfor -%}\n{%- endfor -%}\n\n{%- set ordered_column_names = column_superset.keys() -%}\n{%- set dbt_command = flags.WHICH -%}\n\n\n{% if dbt_command in [\"run\", \"build\"] %}\n{% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n{{ exceptions.raise_compiler_error(error_message) }}\n{%- endif -%}\n{%- endif -%}\n\n{%- for relation in relations %}\n\n(\n    select\n\n        {%- if source_column_name is not none %}\n        cast(\n            {{ string_literal(relation) }} as {{ type_string() }}\n        ) as {{ source_column_name }},\n        {%- endif %}\n\n        {% for col_name in ordered_column_names -%}\n\n        {%- set col = column_superset[col_name] %}\n        {%- set col_type = column_override.get(col.column, col.data_type) %}\n        {%- set col_name = (\n    adapter.quote(col_name)\n    if col_name in relation_columns[relation]\n    else \"null\"\n) %}\n        cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }}\n        {% if not loop.last %},{% endif -%}\n\n        {%- endfor %}\n\n    from {{ relation }}\n\n    {% if where -%} where {{ where }} {%- endif %}\n)\n\n{% if not loop.last -%}\nunion all\n{% endif -%}\n\n{%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.505504, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n{% do dbt_utils.xdb_deprecation_warning_without_replacement(\n    \"cast_array_to_string\", model.package_name, model.name\n) %}\n{{\n    adapter.dispatch(\n        \"cast_array_to_string\",\n        \"dbt_utils\",\n    )(array)\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5073493, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\ncast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.507672, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n{{ replace(replace(array_as_string, \"'}'\", \"']'\"), \"'{'\", \"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.508052, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\ncast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.508214, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n'['\n|| (select string_agg(cast(element as string), ',') from unnest({{ array }}) element)\n|| ']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.508327, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n{{ return(adapter.dispatch(\"get_url_host\", \"dbt_utils\")(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5097525, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = split_part(\n    split_part(\n        replace(\n            replace(\n                replace(field, \"'android-app://'\", \"''\"), \"'http://'\", \"''\"\n            ),\n            \"'https://'\",\n            \"''\",\n        ),\n        \"'/'\",\n        1,\n    ),\n    \"'?'\",\n    1,\n) -%}\n{{\n    dbt.safe_cast(\n        parsed,\n        type_string(),\n    )\n}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5102792, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n{{ return(adapter.dispatch(\"get_url_path\", \"dbt_utils\")(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5117612, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n{%- set stripped_url = replace(\n    replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\"\n) -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n{%- set parsed_path = split_part(\n    right(stripped_url, length(stripped_url) ~ \"-\" ~ first_slash_pos),\n    \"'?'\",\n    1,\n) -%}\n\n{{ safe_cast(parsed_path, type_string()) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5125206, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n{# needed for safe_add to allow for non-keyword arguments see SO post #}\n{# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n{% set frustrating_jinja_feature = varargs %}\n{{ return(adapter.dispatch(\"surrogate_key\", \"dbt_utils\")(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5140324, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs | length >= 1 or field_list is string %}\n\n{%- set error_message = \" Warning: the `surrogate_key` macro now takes a single list argument instead of \\ multiple string arguments. Support for multiple string arguments will be \\ deprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\ \".format(\n    model.package_name, model.name\n) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %} {%- set _ = field_list_xf.append(field) -%} {%- endfor -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- else -%} {%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n{%- set _ = fields.append(\n    \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n) -%} {%- if not loop.last %} {%- set _ = fields.append(\"'-'\") -%} {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5161526, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_string", "macro_sql": "\n{%- macro type_string() -%}\n{{ return(adapter.dispatch(\"type_string\", \"dbt_utils\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5180533, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n{% do dbt_utils.xdb_deprecation_warning(\n    \"type_string\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\n            \"type_string\",\n            \"dbt\",\n        )()\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5183327, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n{{ return(adapter.dispatch(\"type_timestamp\", \"dbt_utils\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5186207, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n{% do dbt_utils.xdb_deprecation_warning(\n    \"type_timestamp\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\n            \"type_timestamp\",\n            \"dbt\",\n        )()\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5189316, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_float", "macro_sql": "\n{%- macro type_float() -%}\n{{ return(adapter.dispatch(\"type_float\", \"dbt_utils\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.519103, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n{% do dbt_utils.xdb_deprecation_warning(\"type_float\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"type_float\", \"dbt\")()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.519368, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_numeric", "macro_sql": "\n{%- macro type_numeric() -%}\n{{ return(adapter.dispatch(\"type_numeric\", \"dbt_utils\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5196972, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n{% do dbt_utils.xdb_deprecation_warning(\n    \"type_numeric\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\n            \"type_numeric\",\n            \"dbt\",\n        )()\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5200045, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_bigint", "macro_sql": "\n{%- macro type_bigint() -%}\n{{ return(adapter.dispatch(\"type_bigint\", \"dbt_utils\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.520171, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n{% do dbt_utils.xdb_deprecation_warning(\n    \"type_bigint\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\n            \"type_bigint\",\n            \"dbt\",\n        )()\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.520527, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_int", "macro_sql": "\n{%- macro type_int() -%}\n{{ return(adapter.dispatch(\"type_int\", \"dbt_utils\")()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5206997, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n{% do dbt_utils.xdb_deprecation_warning(\"type_int\", model.package_name, model.name) %}\n{{ return(adapter.dispatch(\"type_int\", \"dbt\")()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5209594, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n{{ return(adapter.dispatch(\"escape_single_quotes\", \"dbt_utils\")(expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5226197, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n{% do dbt_utils.xdb_deprecation_warning(\n    \"escape_single_quotes\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\n            \"escape_single_quotes\",\n            \"dbt\",\n        )(expression)\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5230198, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(\n    column,\n    values,\n    alias=True,\n    agg=\"sum\",\n    cmp=\"=\",\n    prefix=\"\",\n    suffix=\"\",\n    then_value=1,\n    else_value=0,\n    quote_identifiers=True,\n    distinct=False\n) %}\n{{\n    return(\n        adapter.dispatch(\"pivot\", \"dbt_utils\")(\n            column,\n            values,\n            alias,\n            agg,\n            cmp,\n            prefix,\n            suffix,\n            then_value,\n            else_value,\n            quote_identifiers,\n            distinct,\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.525116, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(\n    column,\n    values,\n    alias=True,\n    agg=\"sum\",\n    cmp=\"=\",\n    prefix=\"\",\n    suffix=\"\",\n    then_value=1,\n    else_value=0,\n    quote_identifiers=True,\n    distinct=False\n) %}\n{% for value in values %}\n{{ agg }} (\n    {% if distinct %}distinct {% endif %}\n    case\n        when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n        else {{ else_value }}\n    end\n)\n{% if alias %}\n{% if quote_identifiers %} as {{ adapter.quote(prefix ~ value ~ suffix) }}\n{% else %} as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n{% endif %}\n{% endif %}\n{% if not loop.last %},{% endif %}\n{% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.526161, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n{% do dbt_utils.xdb_deprecation_warning_without_replacement(\n    \"array_append\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\"array_append\", \"dbt_utils\",)(\n            array,\n            new_element,\n        )\n    )\n}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.527712, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\narray_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5278907, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n{{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.528116, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n{{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5283139, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n{% do dbt_utils.xdb_deprecation_warning_without_replacement(\n    \"array_concat\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\"array_concat\", \"dbt_utils\",)(\n            array_1,\n            array_2,\n        )\n    )\n}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5307992, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\narray_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5309443, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\narray_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5310755, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\narray_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.531207, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type(\"integer\")) -%}\n{% do dbt_utils.xdb_deprecation_warning_without_replacement(\n    \"array_construct\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\"array_construct\", \"dbt_utils\",)(\n            inputs,\n            data_type,\n        )\n    )\n}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5331368, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n{% if inputs | length > 0 %} array[{{ inputs | join(\" , \") }}]\n{% else %} array[]::{{ data_type }} []\n{% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5335655, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\narray_construct({{ inputs | join(\" , \") }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5337217, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\narray({{ inputs | join(\" , \") }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.533857, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n[{{ inputs | join(\" , \") }}]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5339956, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n{% do dbt_utils.xdb_deprecation_warning_without_replacement(\n    \"current_timestamp\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\n            \"current_timestamp\",\n            \"dbt_utils\",\n        )()\n    )\n}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.535844, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\ncurrent_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5359728, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %} getdate() {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.536041, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %} current_timestamp {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.53611, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n{% do dbt_utils.xdb_deprecation_warning_without_replacement(\n    \"current_timestamp_in_utc\", model.package_name, model.name\n) %}\n{{\n    return(\n        adapter.dispatch(\n            \"current_timestamp_in_utc\",\n            \"dbt_utils\",\n        )()\n    )\n}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5363603, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n{{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5366328, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\nconvert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5368264, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n(current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.536943, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n{{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5370862, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(\n    target_schema,\n    target_table,\n    timestamp_field,\n    start_date,\n    stop_date,\n    period\n) -%}\n{{\n    return(\n        adapter.dispatch(\"get_period_boundaries\", \"dbt_utils\")(\n            target_schema,\n            target_table,\n            timestamp_field,\n            start_date,\n            stop_date,\n            period,\n        )\n    )\n}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.543008, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(\n    target_schema,\n    target_table,\n    timestamp_field,\n    start_date,\n    stop_date,\n    period\n) -%}\n\n{% call statement('period_boundaries', fetch_result=True) -%}\nwith\n    data as (\n        select\n            coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp\n            as start_timestamp,\n            coalesce(\n                {{\n                    dateadd(\n                        \"millisecond\",\n                        -1,\n                        \"nullif('\" ~ stop_date ~ \"','')::timestamp\",\n                    )\n                }}, {{ dbt_utils.current_timestamp() }}\n            ) as stop_timestamp\n        from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\nselect\n    start_timestamp,\n    stop_timestamp,\n    {{ datediff(\"start_timestamp\", \"stop_timestamp\", period) }} + 1 as num_periods\nfrom data {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.543553, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(\n    target_cols_csv,\n    sql,\n    timestamp_field,\n    period,\n    start_timestamp,\n    stop_timestamp,\n    offset\n) -%}\n    {{\n        return(\n            adapter.dispatch(\"get_period_sql\", \"dbt_utils\")(\n                target_cols_csv,\n                sql,\n                timestamp_field,\n                period,\n                start_timestamp,\n                stop_timestamp,\n                offset,\n            )\n        )\n    }}\n    {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5438662, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(\n    target_cols_csv,\n    sql,\n    timestamp_field,\n    period,\n    start_timestamp,\n    stop_timestamp,\n    offset\n) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n    {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\nselect {{ target_cols_csv }}\nfrom ({{ filtered_sql }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5443416, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n    {%- set timestamp_field = config.require(\"timestamp_field\") -%}\n    {%- set start_date = config.require(\"start_date\") -%}\n    {%- set stop_date = config.get(\"stop_date\") or \"\" -%}\n    {%- set period = config.get(\"period\") or \"week\" -%}\n\n    {%- set deprecation_warning = (\n    \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \"\n    ~ package\n    ~ \".\"\n    ~ model\n    ~ \" model triggered this warning.\"\n) -%}\n    {%- do exceptions.warn(deprecation_warning) -%}\n\n    {%- if sql.find(\"__PERIOD_FILTER__\") == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- set identifier = model[\"name\"] -%}\n\n    {%- set old_relation = adapter.get_relation(\n    database=database, schema=schema, identifier=identifier\n) -%}\n    {%- set target_relation = api.Relation.create(\n    identifier=identifier, schema=schema, type=\"table\"\n) -%}\n\n    {%- set non_destructive_mode = flags.NON_DESTRUCTIVE == True -%}\n    {%- set full_refresh_mode = flags.FULL_REFRESH == True -%}\n\n    {%- set exists_as_table = old_relation is not none and old_relation.is_table -%}\n    {%- set exists_not_as_table = (\n    old_relation is not none and not old_relation.is_table\n) -%}\n\n    {%- set should_truncate = (\n    non_destructive_mode and full_refresh_mode and exists_as_table\n) -%}\n    {%- set should_drop = not should_truncate and (\n    full_refresh_mode or exists_not_as_table\n) -%}\n    {%- set force_create = flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE -%}\n\n    -- setup\n    {% if old_relation is none -%}\n    -- noop\n    {%- elif should_truncate -%} {{ adapter.truncate_relation(old_relation) }}\n    {%- elif should_drop -%}\n    {{ adapter.drop_relation(old_relation) }} {%- set old_relation = none -%}\n    {%- endif %}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n    -- `begin` happens here, so `commit` after it to finish the transaction\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n    {% call statement() -%}\n    begin  -- make extra sure we've closed out the transaction\n;\ncommit\n;\n{%- endcall %}\n\n-- build model\n{% if force_create or old_relation is none -%}\n{# Create an empty target table -#}\n{% call statement('main') -%}\n{%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", \"false\") -%}\n{{ create_table_as(False, target_relation, empty_sql) }}\n{%- endcall %}\n{%- endif %}\n\n{% set _ = dbt_utils.get_period_boundaries(\n    schema, identifier, timestamp_field, start_date, stop_date, period\n) %}\n{%- set start_timestamp = load_result(\"period_boundaries\")[\"data\"][0][0] | string -%}\n{%- set stop_timestamp = load_result(\"period_boundaries\")[\"data\"][0][1] | string -%}\n{%- set num_periods = load_result(\"period_boundaries\")[\"data\"][0][2] | int -%}\n\n{% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n{%- set target_cols_csv = target_columns | map(attribute=\"quoted\") | join(\", \") -%}\n{%- set loop_vars = {\"sum_rows_inserted\": 0} -%}\n\n-- commit each period as a separate transaction\n{% for i in range(num_periods) -%}\n{%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n{{ dbt_utils.log_info(msg) }}\n\n{%- set tmp_identifier = model[\"name\"] ~ \"__dbt_incremental_period\" ~ i ~ \"_tmp\" -%}\n{%- set tmp_relation = api.Relation.create(\n    identifier=tmp_identifier, schema=schema, type=\"table\"\n) -%}\n{% call statement() -%}\n{% set tmp_table_sql = dbt_utils.get_period_sql(\n    target_cols_csv,\n    sql,\n    timestamp_field,\n    period,\n    start_timestamp,\n    stop_timestamp,\n    i,\n) %}\n{{ dbt.create_table_as(True, tmp_relation, tmp_table_sql) }}\n{%- endcall %}\n\n{{\n    adapter.expand_target_column_types(\n        from_relation=tmp_relation, to_relation=target_relation\n    )\n}}\n{%- set name = \"main-\" ~ i -%}\n{% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n{%- endcall %}\n{% set result = load_result(\"main-\" ~ i) %}\n{% if \"response\" in result.keys() %}  {# added in v0.19.0 #}\n{% set rows_inserted = result[\"response\"][\"rows_affected\"] %}\n{# older versions #}\n{% else %} {% set rows_inserted = result[\"status\"].split(\" \")[2] | int %}\n{% endif %}\n\n{%- set sum_rows_inserted = loop_vars[\"sum_rows_inserted\"] + rows_inserted -%}\n{%- if loop_vars.update({\"sum_rows_inserted\": sum_rows_inserted}) %} {% endif -%}\n\n{%- set msg = (\n    \"Ran for \"\n    ~ period\n    ~ \" \"\n    ~ (i + 1)\n    ~ \" of \"\n    ~ (num_periods)\n    ~ \"; \"\n    ~ rows_inserted\n    ~ \" records inserted\"\n) -%}\n{{ dbt_utils.log_info(msg) }}\n\n{%- endfor %}\n\n{% call statement() -%}\nbegin\n;\n{%- endcall %}\n\n{{ run_hooks(post_hooks, inside_transaction=True) }}\n\n{% call statement() -%}\ncommit\n;\n{%- endcall %}\n\n{{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{%- set status_string = \"INSERT \" ~ loop_vars[\"sum_rows_inserted\"] -%}\n\n{% call noop_statement('main', status_string) -%}\n-- no-op\n{%- endcall %}\n\n-- Return the relations created in this materialization\n{{ return({\"relations\": [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5496585, "supported_languages": ["sql"]}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n{{\n    return(\n        adapter.dispatch(\"test_recency\", \"dbt_utils\")(\n            model, field, datepart, interval\n        )\n    )\n}}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5512085, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/workspaces/preppin-data-dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (select max({{ field }}) as most_recent from {{ model }})\n\nselect most_recent, {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1668146099.5517054, "supported_languages": null}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/home/vscode/.local/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "preppin_data.__overview__": {"unique_id": "preppin_data.__overview__", "package_name": "preppin_data", "root_path": "/workspaces/preppin-data-dbt", "path": "overview.md", "original_file_path": "models/overview.md", "name": "__overview__", "block_contents": "# Welcome to Preppin' Data in dbt!\nThis dbt project is works as both a working example of using dbt-duckdb to personal, local projects and well as a portfolio of solutions and documentation for using dbt to solve weekly [Preppin' Data](https://preppindata.blogspot.com/) challenges.\n\n# View Source Code\nAll of the source code for this project and instructions on how to create a project like this for yourself\ncan be found on [my preppin-data-dbt GitHub Repo](https://github.com/jharris126/preppin-data-dbt).\n\n# Why Use dbt & DuckDB for Preppin' Data Challenges?\n### The Full ELT of a Weekly Challenge All In One Place\n[dbt](https://www.getdbt.com/) allows for the creation of models in both [Python](https://docs.getdbt.com/docs/building-a-dbt-project/building-models/python-models) and [SQL](https://docs.getdbt.com/docs/build/sql-models). With Python models, dbt can be used to programmatically download Preppin' Data input files and load them into this project's [DuckDB](https://duckdb.org/) database. These input file sourcing models can be found in `models/solutions`.\n### Macros and DRY Development\ndbt uses [jinja + macros](https://docs.getdbt.com/docs/build/jinja-macros) and allows layering smaller models in the same [DAG](https://docs.getdbt.com/terms/dag) to enable [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself) transformation development.\n### dbt Docs and Storing All Challenges In One Place\nOne of the biggest draw to dbt is its autogenerated docs and lineage. This benefit definitely applies to documenting Preppin' Data Challenges. dbt uses the [ref function](https://docs.getdbt.com/reference/dbt-jinja-functions/ref) to simultaneously orchestrate `dbt run` in the proper order for managing dependencies of each building block toward the final solution as well as to generate a lineage graph of the project. Click lineage icon in the bottom right corner to view the full lineage DAG for this project. The docs and dbt's natural integration with Git facilitates a cohesive environment for storing all challenges in a single, easy to navigate project that allows for certain components and snippits to be reused across multiple weeks' challenges when applicable."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.preppin_data.src_week_202201": [], "model.preppin_data.src_week_202243": [], "model.preppin_data.src_week_202239": [], "model.preppin_data.202239_solution": ["model.preppin_data.src_week_202239"], "model.preppin_data.202201_solution": ["model.preppin_data.src_week_202201"], "model.preppin_data.202244_solution": ["model.preppin_data.src_week_202244"], "model.preppin_data.src_week_202242": [], "test.preppin_data.unique_202239_solution_record_id.b4ff73b03d": ["model.preppin_data.202239_solution"], "test.preppin_data.not_null_202239_solution_record_id.8190d90f93": ["model.preppin_data.202239_solution"], "test.preppin_data.not_null_202239_solution_employee.c40da41029": ["model.preppin_data.202239_solution"], "test.preppin_data.not_null_202239_solution_work_level.528a16a649": ["model.preppin_data.202239_solution"], "test.preppin_data.not_null_202244_solution_order_id.e0ba672ac1": ["model.preppin_data.202244_solution"], "test.preppin_data.unique_202244_solution_order_id.40381b5035": ["model.preppin_data.202244_solution"], "test.preppin_data.not_null_202244_solution_order_number.6feabe4edf": ["model.preppin_data.202244_solution"], "test.preppin_data.not_null_202244_solution_customer.149114f4d4": ["model.preppin_data.202244_solution"], "test.preppin_data.not_null_202244_solution_order_date.da4c2a2f92": ["model.preppin_data.202244_solution"], "model.preppin_data.src_week_202244": [], "model.preppin_data.src_week_202245": [], "model.preppin_data.202242_solution": ["model.preppin_data.dates", "model.preppin_data.src_week_202242"], "model.preppin_data.202243_solution": ["model.preppin_data.dates", "model.preppin_data.src_week_202243"], "model.preppin_data.dates": [], "test.preppin_data.unique_dates_date_value.134261fae6": ["model.preppin_data.dates"], "test.preppin_data.not_null_dates_date_value.e976e8f11b": ["model.preppin_data.dates"], "test.preppin_data.not_null_202242_solution_score.7f41d14267": ["model.preppin_data.202242_solution"], "test.preppin_data.accepted_values_202242_solution_flag__Actual__Carried_Over.38869f6d72": ["model.preppin_data.202242_solution"], "test.preppin_data.not_null_202243_solution_score.9e2d7f6985": ["model.preppin_data.202243_solution"], "test.preppin_data.accepted_values_202243_solution_flag__Actual__Carried_Over__Pre_First_Session.ebbc4cb330": ["model.preppin_data.202243_solution"], "model.preppin_data.202245_solution": ["model.preppin_data.src_week_202245"], "test.preppin_data.not_null_202245_solution_store.ab5b9c2e95": ["model.preppin_data.202245_solution"], "test.preppin_data.accepted_values_202245_solution_store__Dulwich__Wimbledon__Notting_Hill__Lewisham.6bf0e9a01a": ["model.preppin_data.202245_solution"], "test.preppin_data.not_null_202245_solution_date.f52c17dc46": ["model.preppin_data.202245_solution"], "test.preppin_data.not_null_202245_solution_sales.1abca2c1d3": ["model.preppin_data.202245_solution"], "test.preppin_data.dbt_utils_expression_is_true_202245_solution_sales___0.065580e053": ["model.preppin_data.202245_solution"], "test.preppin_data.not_null_202245_solution_profit.5148ed1480": ["model.preppin_data.202245_solution"]}, "child_map": {"model.preppin_data.src_week_202201": ["model.preppin_data.202201_solution"], "model.preppin_data.src_week_202243": ["model.preppin_data.202243_solution"], "model.preppin_data.src_week_202239": ["model.preppin_data.202239_solution"], "model.preppin_data.202239_solution": ["test.preppin_data.not_null_202239_solution_employee.c40da41029", "test.preppin_data.not_null_202239_solution_record_id.8190d90f93", "test.preppin_data.not_null_202239_solution_work_level.528a16a649", "test.preppin_data.unique_202239_solution_record_id.b4ff73b03d"], "model.preppin_data.202201_solution": [], "model.preppin_data.202244_solution": ["test.preppin_data.not_null_202244_solution_customer.149114f4d4", "test.preppin_data.not_null_202244_solution_order_date.da4c2a2f92", "test.preppin_data.not_null_202244_solution_order_id.e0ba672ac1", "test.preppin_data.not_null_202244_solution_order_number.6feabe4edf", "test.preppin_data.unique_202244_solution_order_id.40381b5035"], "model.preppin_data.src_week_202242": ["model.preppin_data.202242_solution"], "test.preppin_data.unique_202239_solution_record_id.b4ff73b03d": [], "test.preppin_data.not_null_202239_solution_record_id.8190d90f93": [], "test.preppin_data.not_null_202239_solution_employee.c40da41029": [], "test.preppin_data.not_null_202239_solution_work_level.528a16a649": [], "test.preppin_data.not_null_202244_solution_order_id.e0ba672ac1": [], "test.preppin_data.unique_202244_solution_order_id.40381b5035": [], "test.preppin_data.not_null_202244_solution_order_number.6feabe4edf": [], "test.preppin_data.not_null_202244_solution_customer.149114f4d4": [], "test.preppin_data.not_null_202244_solution_order_date.da4c2a2f92": [], "model.preppin_data.src_week_202244": ["model.preppin_data.202244_solution"], "model.preppin_data.src_week_202245": ["model.preppin_data.202245_solution"], "model.preppin_data.202242_solution": ["test.preppin_data.accepted_values_202242_solution_flag__Actual__Carried_Over.38869f6d72", "test.preppin_data.not_null_202242_solution_score.7f41d14267"], "model.preppin_data.202243_solution": ["test.preppin_data.accepted_values_202243_solution_flag__Actual__Carried_Over__Pre_First_Session.ebbc4cb330", "test.preppin_data.not_null_202243_solution_score.9e2d7f6985"], "model.preppin_data.dates": ["model.preppin_data.202242_solution", "model.preppin_data.202243_solution", "test.preppin_data.not_null_dates_date_value.e976e8f11b", "test.preppin_data.unique_dates_date_value.134261fae6"], "test.preppin_data.unique_dates_date_value.134261fae6": [], "test.preppin_data.not_null_dates_date_value.e976e8f11b": [], "test.preppin_data.not_null_202242_solution_score.7f41d14267": [], "test.preppin_data.accepted_values_202242_solution_flag__Actual__Carried_Over.38869f6d72": [], "test.preppin_data.not_null_202243_solution_score.9e2d7f6985": [], "test.preppin_data.accepted_values_202243_solution_flag__Actual__Carried_Over__Pre_First_Session.ebbc4cb330": [], "model.preppin_data.202245_solution": ["test.preppin_data.accepted_values_202245_solution_store__Dulwich__Wimbledon__Notting_Hill__Lewisham.6bf0e9a01a", "test.preppin_data.dbt_utils_expression_is_true_202245_solution_sales___0.065580e053", "test.preppin_data.not_null_202245_solution_date.f52c17dc46", "test.preppin_data.not_null_202245_solution_profit.5148ed1480", "test.preppin_data.not_null_202245_solution_sales.1abca2c1d3", "test.preppin_data.not_null_202245_solution_store.ab5b9c2e95"], "test.preppin_data.not_null_202245_solution_store.ab5b9c2e95": [], "test.preppin_data.accepted_values_202245_solution_store__Dulwich__Wimbledon__Notting_Hill__Lewisham.6bf0e9a01a": [], "test.preppin_data.not_null_202245_solution_date.f52c17dc46": [], "test.preppin_data.not_null_202245_solution_sales.1abca2c1d3": [], "test.preppin_data.dbt_utils_expression_is_true_202245_solution_sales___0.065580e053": [], "test.preppin_data.not_null_202245_solution_profit.5148ed1480": []}}